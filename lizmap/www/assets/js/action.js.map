{"version":3,"file":"../../lizmap/www/assets/js/action.js","mappings":"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","sources":["webpack://assets/./src/legacy/action.js"],"sourcesContent":["var action_current_object = null;\n\nfunction createActionLayer(){\n\n    var action_layer = new OpenLayers.Layer.Vector('actionLayer',{\n        styleMap: new OpenLayers.StyleMap({\n            graphicName: 'circle',\n            pointRadius: 6,\n            fill: true,\n            fillColor: 'lightblue',\n            fillOpacity: 0.3,\n            stroke: true,\n            strokeWidth: 3,\n            strokeColor: 'blue',\n            strokeOpacity: 0.8\n        })\n    });\n    lizMap.map.addLayer(action_layer);\n    lizMap.layers['actionLayer'] = action_layer;\n}\n\nfunction getItemByName(layerId, name){\n    var ritem = null;\n    for(var i in actionConfig[layerId]){\n        var item = actionConfig[layerId][i];\n        if( item.name == name ){\n            ritem = item;\n        }\n    }\n    return ritem;\n}\n\nfunction getActionData(layerId, fid, name){\n\n    var options = {\n        \"layerId\": layerId,\n        \"featureId\": fid,\n        \"name\": name\n    };\n    var item = getItemByName(layerId, name);\n\n    // Request action and get data\n    var url = actionConfigData.url;\n    $.get( url, options, function(data) {\n\n        // Report errors\n        if ('errors' in data) {\n            lizMap.addMessage(data.errors.title, 'error', true).attr('id','lizmap-action-message');\n            console.log(data.errors.detail);\n            return false;\n        }\n\n        // Returned features\n        var features = addFeatures(layerId, item, data);\n\n        // Display a message if given\n        if (features.length > 0) {\n            var feat = features[0];\n            var message_field = 'message';\n            if ('attributes' in feat && message_field in feat.attributes) {\n                $('#lizmap-action-message').remove();\n                var message = feat.attributes[message_field].trim();\n                if (message) {\n                    lizMap.addMessage(message, 'info', true).attr('id','lizmap-action-message');\n                }\n            }\n        }\n\n        // Callbacks\n        if (features.length > 0\n            && 'callbacks' in item\n            && item.callbacks.length > 0 ) {\n            for(let c in item.callbacks) {\n                var cb = item.callbacks[c];\n                var cmethod = cb['method'];\n\n                // Get layer\n                var cLayer = null;\n                if('layerId' in cb){\n                    var clayerId = cb['layerId'];\n                    var getLayerConfig = lizMap.getLayerConfigById( clayerId );\n                    if ( getLayerConfig ){\n                        var layerConfig = getLayerConfig[1];\n                        var featureType = getLayerConfig[0];\n                        var getLayer = lizMap.map.getLayersByName(layerConfig['cleanname']);\n                        if(getLayer.length > 0){\n                            cLayer = getLayer[0];\n                        }\n                    }\n                }\n\n                // Run callback\n                if( cmethod == 'redraw' && cLayer !== null){\n                    // Redraw given layer\n                    //console.log('redraw ' + cLayer.name);\n                    cLayer.redraw(true);\n\n                }\n                var feat = features[0];\n                if (cmethod == 'select' && cLayer !== null){\n                    // Select features in given layer\n                    //console.log('select ' + cLayer.name);\n                    var f = feat.clone()\n                    lizMap.selectLayerFeaturesFromSelectionFeature(featureType, f);\n                }\n                if (cmethod == 'zoom'){\n                    // Zoom to feature\n                    //console.log('zoom to feature');\n                    lizMap.map.zoomToExtent(features[0].geometry.getBounds());\n                }\n            }\n\n        }\n\n        // Lizmap event to allow other scripts to process the data if needed\n        lizMap.events.triggerEvent(\"actionResultReceived\",\n            {\n                'layerId': layerId,\n                'featureId': fid,\n                'action': item,\n                'features': features\n            }\n        );\n\n    }, 'json');\n\n    // Set the action as active\n    action_current_object = layerId + '.' + fid + '.' + name;\n\n}\n\nfunction addFeatures(layerId, item, data){\n\n    // Get layer\n    var layer = lizMap.layers['actionLayer'];\n\n    // Get layer projection\n    var lcrs = 'EPSG:4326';\n    var gFormat = new OpenLayers.Format.GeoJSON({\n        externalProjection: lcrs,\n        internalProjection: lizMap.map.getProjection()\n    });\n\n    // Change layer style\n    if ('style' in item) {\n        layer.styleMap.styles.default.defaultStyle = item.style;\n    }\n\n    // Add features\n    var tfeatures = gFormat.read( data );\n    layer.addFeatures( tfeatures );\n\n    return tfeatures;\n}\n\nfunction addActionButton(layerId, fid, item, popupitem){\n\n    // Build item html\n    let ihtml = '<button class=\"btn btn-mini popup-action\" value=\"';\n    var btname = layerId + '.' + fid + '.' + item.name;\n    ihtml+= btname;\n    ihtml+= '\" title=\"'+ item.title +'\">';\n    ihtml+= '<i class=\"'+ item.icon +'\"></i>';\n    ihtml+= '&nbsp;</button>';\n    var toolbar = popupitem.next('span.popupButtonBar').find('button.popup-action[value=\"'+ btname + '\"]');\n    var popupButtonBar = popupitem.next('span.popupButtonBar');\n    if (popupButtonBar.length != 0) {\n        if (toolbar.length == 0)\n            popupButtonBar.append(ihtml);\n        else\n            toolbar.before(ihtml);\n    } else {\n        ihtml = '<span class=\"popupButtonBar\">' + ihtml + '</span></br>';\n        popupitem.after(ihtml);\n    }\n    popupitem.find('button.btn').tooltip({\n        placement: 'bottom'\n    });\n\n    // Trigger action when clicking on button\n    $('div.lizmapPopupContent button.popup-action[value=\"'+ btname + '\"]').click(function(){\n        // Clear message\n        $('#lizmap-action-message').remove();\n\n        // Empty actionLayer: do it if button & action was active or not\n        var layer = lizMap.layers['actionLayer'];\n        layer.destroyFeatures();\n\n        var val = $(this).val();\n        var vals = val.split('.');\n        var layerId = vals[0];\n        var fid = vals[1];\n        var name = vals[2];\n\n        // Do nothing if geometry was already set\n        // This allow to delete the current geometry\n        if (action_current_object) {\n            // deactivate if the current action was this one\n            if (action_current_object == layerId + '.' + fid + '.' + name) {\n                action_current_object = null;\n                return true;\n            }\n        }\n        action_current_object = null;\n\n        // Get action item data\n        // And add confirm question if needed\n        var item = getItemByName(layerId, name);\n        if ('confirm' in item && item.confirm.trim() != '') {\n            var msg = item.confirm.trim();\n            var go_on = confirm(msg);\n            if (!go_on) {\n                return false;\n            }\n        }\n\n        // Toggle given geometry\n        getActionData(layerId, fid, name);\n\n        return false;\n    }).hover(// Add hover\n        function(){ $(this).addClass('btn-primary'); },\n        function(){ $(this).removeClass('btn-primary'); }\n    )\n    ;\n}\n\nlizMap.events.on({\n\n\n    'uicreated': function(){\n        createActionLayer();\n    },\n\n    'lizmappopupdisplayed': function(){\n        // Add action buttons if needed\n        $('div.lizmapPopupContent input.lizmap-popup-layer-feature-id').each(function(){\n            // Get layer id and feature id\n            var self = $(this);\n            var val = self.val();\n            var fid = val.split('.').pop();\n            var layerId = val.replace( '.' + fid, '' );\n\n            // Get layer lizmap config\n            var getLayerConfig = lizMap.getLayerConfigById( layerId );\n            if (!getLayerConfig)\n                return true;\n\n            // Do nothing if layer is not found in action config\n            if (!(layerId in actionConfig)) {\n                return true;\n            }\n\n            // Add buttons for this layer\n            for (var i in actionConfig[layerId]) {\n                var item = actionConfig[layerId][i];\n                //console.log(item);\n                addActionButton(layerId, fid, item, self);\n            }\n        })\n\n    }\n});\n"],"names":["action_current_object","getItemByName","layerId","name","ritem","i","actionConfig","item","addActionButton","fid","popupitem","ihtml","btname","title","icon","toolbar","next","find","popupButtonBar","length","append","before","after","tooltip","placement","$","click","remove","lizMap","layers","destroyFeatures","vals","this","val","split","confirm","trim","msg","options","url","actionConfigData","get","data","addMessage","errors","attr","console","log","detail","features","layer","gFormat","OpenLayers","Format","GeoJSON","externalProjection","internalProjection","map","getProjection","styleMap","styles","default","defaultStyle","style","tfeatures","read","addFeatures","feat","attributes","message","callbacks","c","cb","cmethod","cLayer","clayerId","getLayerConfig","getLayerConfigById","layerConfig","featureType","getLayer","getLayersByName","redraw","f","clone","selectLayerFeaturesFromSelectionFeature","zoomToExtent","geometry","getBounds","events","triggerEvent","getActionData","hover","addClass","removeClass","on","action_layer","Layer","Vector","StyleMap","graphicName","pointRadius","fill","fillColor","fillOpacity","stroke","strokeWidth","strokeColor","strokeOpacity","addLayer","each","self","pop","replace"],"sourceRoot":""}