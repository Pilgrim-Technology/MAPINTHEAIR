{"version":3,"file":"../../lizmap/www/assets/js/attributeTable.js","mappings":"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","sources":["webpack://assets/./src/legacy/attributeTable.js"],"sourcesContent":["var lizAttributeTable = function() {\n\n    lizMap.events.on({\n        'uicreated':function(evt){\n\n            // Attributes\n            var config = lizMap.config;\n            var layers = lizMap.layers;\n            var hasAttributeTableLayers = false;\n            var attributeLayersActive = false;\n            var attributeLayersDic = {};\n            var wfsTypenameMap = {};\n            var mediaLinkPrefix = OpenLayers.Util.urlAppend(lizUrls.media\n              ,OpenLayers.Util.getParameterString(lizUrls.params)\n            )\n            var startupFilter = false;\n            if( !( typeof lizLayerFilter === 'undefined' ) ){\n                startupFilter = true;\n                lizMap.lizmapLayerFilterActive = true;\n            }\n\n            var limitDataToBbox = false;\n            if ( 'limitDataToBbox' in config.options && config.options.limitDataToBbox == 'True'){\n                limitDataToBbox = true;\n            }\n\n            if (!('attributeLayers' in config))\n                return -1;\n\n            // Lizmap URL\n            var service = OpenLayers.Util.urlAppend(lizUrls.wms\n                    ,OpenLayers.Util.getParameterString(lizUrls.params)\n            );\n\n            // Verifying WFS layers\n            var featureTypes = lizMap.getVectorLayerFeatureTypes();\n            if (featureTypes.length == 0 )\n                return -1;\n\n            $('body').css('cursor', 'wait');\n\n            // Sort attribute layers as given by creation order in Lizmap plugin\n            var attributeLayersSorted = [];\n\n            for (var lname in config.attributeLayers) {\n                var al = config.attributeLayers[lname];\n                al.name = lname;\n                attributeLayersSorted.push(al);\n            }\n            attributeLayersSorted.sort(function(a, b) {\n                return a.order - b.order;\n            });\n\n            for (var i = 0; i < attributeLayersSorted.length; i++) {\n                var al = attributeLayersSorted[i];\n                attributeLayersDic[lizMap.cleanName(al.name)] = al.name;\n            }\n\n            for(const featureType of featureTypes) {\n                // typename\n                var typeName = featureType.getElementsByTagName('Name')[0].textContent;\n                // layername\n                var layername = lizMap.getNameByTypeName( typeName );\n                if ( !layername || layername == undefined )\n                    continue;\n                // lizmap internal js cleaned name\n                var cleanName = lizMap.cleanName(layername);\n                // lizmap config file layer name\n                var configLayerName = attributeLayersDic[cleanName];\n                // Add matching between wfs type name and clean name\n                wfsTypenameMap[cleanName] = typeName;\n\n                if (configLayerName in config.attributeLayers) {\n                    hasAttributeTableLayers = true;\n\n                    // Get layers config information\n                    var atConfig = config.attributeLayers[configLayerName];\n\n                    // Add some properties to the lizMap.config\n                    config.layers[configLayerName]['features'] = {};\n                    config.layers[configLayerName]['featureCrs'] = null;\n                    config.layers[configLayerName]['featuresFullSet'] = false;\n                    config.layers[configLayerName]['selectedFeatures'] = [];\n                    config.layers[configLayerName]['highlightedFeature'] = null;\n                    config.layers[configLayerName]['filteredFeatures'] = [];\n                    config.layers[configLayerName]['request_params'] = {\n                        'filter' : null,\n                        'exp_filter': null,\n                        'selection': null\n                    };\n\n                    // Get existing filter if exists (via permalink)\n                    var layer = lizMap.map.getLayersByName(cleanName)[0];\n\n                    if( layer\n                        && 'FILTER' in layer.params\n                        && layer.params['FILTER']\n                    ){\n\n                        config.layers[configLayerName]['request_params']['filter'] = layer.params['FILTER'];\n\n                        // Send signal so that getFeatureInfo takes it into account\n                        lizMap.events.triggerEvent(\"layerFilterParamChanged\",\n                            {\n                                'featureType': attributeLayersDic[cleanName],\n                                'filter': config.layers[configLayerName]['request_params']['filter'],\n                                'updateDrawing': false\n                            }\n                        );\n                    }\n\n                    // Add geometryType if not already present (backward compatibility)\n                    if( typeof config.layers[configLayerName]['geometryType'] === 'undefined' ) {\n                        config.layers[configLayerName]['geometryType'] = 'unknown';\n                    }\n\n                    config.layers[configLayerName]['crs'] = featureType.getElementsByTagName('SRS')[0].textContent;\n\n                    if (config.layers[configLayerName]['crs'] !== \"\"){\n                        lizMap.loadProjDefinition(config.layers[configLayerName].crs, function (aProj) {\n                            new OpenLayers.Projection(config.layers[configLayerName].crs);\n                        });\n                    }\n\n                    var bbox = featureType.getElementsByTagName('LatLongBoundingBox')[0];\n                    atConfig['bbox'] = [\n                        parseFloat(bbox.getAttribute('minx'))\n                        , parseFloat(bbox.getAttribute('miny'))\n                        , parseFloat(bbox.getAttribute('maxx'))\n                        , parseFloat(bbox.getAttribute('maxy'))\n                    ];\n                }\n            }\n\n            if (hasAttributeTableLayers) {\n                // Attribute table could be activated to get selection tool\n                var hasDiplayedAttributeTable = false;\n\n                // Add the list of layers in the summary table\n                var tHtml = '<table id=\"attribute-layer-list-table\" class=\"table table-condensed table-hover table-striped\" style=\"width:auto;\">';\n                for( var idx in attributeLayersDic) {\n                    var cleanName = idx;\n\n                    // Do not add a button for the pivot tables\n                    if( 'pivot' in config.attributeLayers[ attributeLayersDic[ cleanName ] ]\n                        && config.attributeLayers[ attributeLayersDic[ cleanName ] ]['pivot'] == 'True'\n                    ){\n                        continue;\n                    }\n\n                    // Do not add a button if not asked by editor\n                    if( 'hideLayer' in config.attributeLayers[ attributeLayersDic[ cleanName ] ]\n                        && config.attributeLayers[ attributeLayersDic[ cleanName ] ]['hideLayer'] == 'True'\n                    ){\n                        continue;\n                    }\n\n                    var title = config.layers[ attributeLayersDic[ cleanName ] ][ 'title' ];\n                    tHtml+= '<tr>';\n                    tHtml+= '   <td>' + title + '</td><td><button value=' + cleanName + ' class=\"btn btn-open-attribute-layer\">'+ lizDict['attributeLayers.toolbar.btn.detail'] +'</button></td>';\n                    tHtml+= '</tr>';\n\n                    hasDiplayedAttributeTable = true;\n                }\n\n                tHtml+= '</table>';\n                if ( hasDiplayedAttributeTable ) {\n                    $('#attribute-layer-list').html(tHtml);\n\n                    // Bind click on detail buttons\n                    $('button.btn-open-attribute-layer')\n                    .click(function(){\n                        var cleanName = $(this).val();\n\n                        // Disable attribute table if limitDataToBbox and layer not visible in map\n                        if(limitDataToBbox){\n                            var layer = lizMap.map.getLayersByName( cleanName )[0];\n                            var ms = lizMap.map.getScale();\n                            if( layer ) {\n                                var lvisibility = layer.maxScale < ms && ms < layer.minScale;\n                                if( !lvisibility ){\n                                    var msg = lizDict['attributeLayers.msg.layer.not.visible'];\n                                    lizMap.addMessage( msg, 'info', true).attr('id','lizmap-attribute-message');\n                                    return false;\n                                }\n                            }\n                        }\n\n                        // Add Div if not already there\n                        var lname = attributeLayersDic[cleanName];\n                        if( !$('#nav-tab-attribute-layer-' + cleanName ).length )\n                            addLayerDiv(lname);\n                        var aTable = '#attribute-layer-table-'+cleanName;\n\n                        // Get data and fill attribute table\n                        var dFilter = null;\n                        getAttributeFeatureData( lname, dFilter, null, 'extent',\n                            function(someName, someNameFilter, someNameFeatures, someNameAliases){\n                                buildLayerAttributeDatatable( someName, aTable, someNameFeatures, someNameAliases );\n                        });\n\n                        $('#nav-tab-attribute-layer-' + cleanName + ' a' ).tab('show');\n\n                        return false;\n                    })\n                    .hover(\n                        function(){ $(this).addClass('btn-primary'); },\n                        function(){ $(this).removeClass('btn-primary'); }\n                    );\n\n                    // Bind change on options checkboxes\n                    $('#jforms_view_attribute_layers_option_cascade_label input[name=\"cascade\"]').change(function(){\n                        var doCascade = $('#jforms_view_attribute_layers_option_cascade_label input[name=\"cascade\"]').prop('checked');\n                        // refresh filtered layers if any active\n                        if( lizMap.lizmapLayerFilterActive ){\n                            var featureType = lizMap.lizmapLayerFilterActive;\n                            var layerConfig = config.layers[featureType];\n                            if( layerConfig['filteredFeatures'] ){\n\n                                // Update attribute table tools\n                                updateAttributeTableTools( featureType );\n\n                                // Update layer\n                                var cascadeToChildren = true;\n                                if( !doCascade )\n                                    cascadeToChildren = 'removeChildrenFilter';\n                                updateMapLayerDrawing( featureType, cascadeToChildren );\n\n                            }\n                        }\n                    });\n                } else {\n                    // Hide navbar menu\n                    $('#mapmenu li.attributeLayers').hide();\n                }\n\n                // Send signal\n                lizMap.events.triggerEvent(\"attributeLayersReady\",\n                  {'layers': attributeLayersDic}\n                );\n\n                // Map events\n                function warnExtent() {\n                    var btitle = lizDict['attributeLayers.toolbar.btn.refresh.table.tooltip.changed'];\n                    btitle += ' ' + lizDict['attributeLayers.toolbar.btn.refresh.table.tooltip'];\n                    $('button.btn-refresh-table')\n                        .attr('data-original-title', btitle)\n                        .addClass('btn-warning')\n                        .tooltip()\n                        ;\n                }\n                if (limitDataToBbox) {\n                    lizMap.map.events.on({\n                        moveend: function () {\n                            warnExtent();\n                        }\n                    });\n                }\n\n                // Bind click on tabs to resize datatable tables\n                $('#attributeLayers-tabs li').click(function(){\n                    var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                    refreshDatatableSize('#'+mycontainerId);\n                });\n\n            } else {\n                // Hide navbar menu\n                $('#mapmenu li.attributeLayers').hide();\n                return -1;\n            }\n            $('body').css('cursor', 'auto');\n\n            function getDataAndRefreshAttributeTable(layerName, filter, tableSelector, callBack){\n\n                var limitDataToBbox = false;\n                if ( 'limitDataToBbox' in config.options && config.options.limitDataToBbox == 'True'){\n                    limitDataToBbox = true;\n                }\n\n                lizMap.getFeatureData(layerName, filter, null, 'extent', limitDataToBbox, null, null,\n                    function(aName, aNameFilter, aNameFeatures, aNameAliases ){\n                        refreshLayerAttributeDatatable(layerName, tableSelector, aNameFeatures);\n                        document.body.style.cursor = 'default';\n                    });\n            }\n\n            function activateAttributeLayers() {\n                attributeLayersActive = true;\n\n                // Deactivate locate-menu\n                if ( $('#locate-menu').is(':visible') && lizMap.checkMobile()){\n                    $('#toggleLocate').parent().removeClass('active');\n                    $('#locate-menu').toggle();\n                }\n                return false;\n            }\n\n            function deactivateAttributeLayers() {\n                // Some actions done when deactivating attribute table\n                return false;\n            }\n\n            function getRelationInfo(parentLayerId,childLayerId){\n                if( 'relations' in config && parentLayerId in config.relations) {\n                    var layerRelations = config.relations[parentLayerId];\n                    for( var lridx in layerRelations ) {\n                        var relation = layerRelations[lridx];\n                        if (relation.referencingLayer == childLayerId) {\n                            return relation;\n                        }\n                    }\n                }\n                return null;\n            }\n\n            function addLayerDiv(lname) {\n                // Get layer config\n                var atConfig = config.attributeLayers[lname];\n                var cleanName = lizMap.cleanName(lname);\n\n                // Add li to the tabs\n                var liHtml = '<li id=\"nav-tab-attribute-layer-' + cleanName + '\">';\n                liHtml+= '<a href=\"#attribute-layer-' + cleanName + '\" data-toggle=\"tab\">' + config.layers[lname]['title'] ;\n                liHtml+= '&nbsp;<i class=\"btn-close-attribute-tab icon-remove icon-white\" style=\"cursor:pointer\"></i>';\n                liHtml+= '</a>'\n                liHtml+= '</li>';\n\n                $('#attributeLayers-tabs').append( liHtml );\n\n                // Add content div\n                var html = '<div id=\"attribute-layer-' + cleanName + '\" class=\"tab-pane attribute-content bottom-content\" >';\n                html+= '    <div class=\"attribute-layer-main\" id=\"attribute-layer-main-' + cleanName + '\" >';\n\n                if( !config.layers[lname]['selectedFeatures'] )\n                    config.layers[lname]['selectedFeatures'] = [];\n                if( !config.layers[lname]['filteredFeatures'] )\n                    config.layers[lname]['filteredFeatures'] = [];\n\n                var selClass= '';\n                if( config.layers[lname]['selectedFeatures'].length == 0 )\n                    selClass= ' hidden';\n                var filClass= '';\n                if( config.layers[lname]['filteredFeatures'].length > 0 )\n                    filClass= ' active btn-warning';\n                else\n                    filClass = selClass\n\n                // Action bar specific to the tab\n                html+= '<div class=\"attribute-layer-action-bar\">';\n\n                // Search input\n                html+= '<div class=\"btn-group\">';\n                html+= '  <input id=\"attribute-layer-search-' + cleanName + '\" type=\"search\" class=\"form-control\" placeholder=\"'+lizDict['attributeLayers.toolbar.input.search.title']+'\">';\n                html+= '  <i class=\"clear-layer-search icon-remove\" style=\"position:absolute;right:4px;top:4px;cursor:pointer;\"></i>';\n                html+= '</div>';\n\n                // Selected searched lines button\n                html+= '<button class=\"btn-select-searched btn btn-mini\" value=\"'+cleanName+'\" title=\"'+lizDict['attributeLayers.toolbar.btn.select.searched.title']+'\"><i class=\"icon-star\"></i></button>';\n\n                // Unselect button\n                html+= '    <button class=\"btn-unselect-attributeTable btn btn-mini' + selClass + '\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.btn.data.unselect.title']+'\"><i class=\"icon-star-empty\"></i></button>';\n\n                // Move selected to Top button\n                html+= '    <button class=\"btn-moveselectedtotop-attributeTable btn btn-mini' + selClass + '\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.btn.data.moveselectedtotop.title']+'\"><i class=\"icon-arrow-up\"></i></button>';\n\n                // Filter button : only if no filter applied at startup\n                if( !startupFilter\n                    && ( !lizMap.lizmapLayerFilterActive || lizMap.lizmapLayerFilterActive == cleanName )\n                ){\n                    html+= '    <button class=\"btn-filter-attributeTable btn btn-mini' + filClass + '\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.btn.data.filter.title']+'\"><i class=\"icon-filter\"></i></button>';\n                }\n\n                // Invert selection\n                html += '<lizmap-selection-invert tooltip-placement=\"bottom\" feature-type=\"' + cleanName +'\"></lizmap-selection-invert>'\n\n                // Detail button\n                var canPopup = false\n                if( config.layers[lname]\n                    && config.layers[lname]['popup'] == 'True'\n                    && config.layers[lname]['geometryType'] != 'none'\n                    && config.layers[lname]['geometryType'] != 'unknown'\n                ){\n                    canPopup = true;\n                }\n                if( canPopup ){\n                    html+= '<button type=\"checkbox\" class=\"btn-detail-attributeTable btn btn-mini\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.cb.data.detail.title']+'\">';\n                    html+= '<i class=\"icon-info-sign\"></i>';\n                    html+= '</button>';\n                }\n\n                // Create button\n                var canCreate = false;\n                if( 'editionLayers' in config && cleanName in config.editionLayers ) {\n                    var al = config.editionLayers[attributeLayersDic[cleanName]];\n                    if( al.capabilities.createFeature == \"True\" )\n                        canCreate = true;\n                }\n                if( canCreate ){\n                    html+= '    <button class=\"btn-createFeature-attributeTable btn btn-mini\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.btn.data.createFeature.title']+'\"><i class=\"icon-plus-sign\"></i></button>';\n                }\n\n                // Refresh button (if limitDataToBbox is true)\n                if( limitDataToBbox\n                    && config.layers[lname]['geometryType'] != 'none'\n                    && config.layers[lname]['geometryType'] != 'unknown'\n                ){\n                    // Add button to refresh table\n                    html+= '    <button class=\"btn-refresh-table btn btn-mini\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.btn.refresh.table.tooltip']+'\">'+lizDict['attributeLayers.toolbar.btn.refresh.table.title']+'</button>';\n\n                }\n\n                // Get children content\n                var childHtml = getChildrenHtmlContent( lname );\n                var alc='';\n\n                // Toggle children content\n                if( childHtml ){\n                    // Add button to show/hide children tables\n                    html+= '    <button class=\"btn-toggle-children btn btn-mini\" value=\"' + cleanName + '\" >'+lizDict['attributeLayers.toolbar.btn.toggle.children.title']+'</button>';\n\n                    // Add buttons to create new children\n                    if( childHtml['childCreateButton'] )\n                        html+= childHtml['childCreateButton'];\n\n                    // Add buttons to link parent and children\n                    if( childHtml['layerLinkButton'] )\n                        html+= childHtml['layerLinkButton'];\n                }\n\n                // Export tools\n                if ( 'exportLayers' in config.options && config.options.exportLayers == 'True' ) {\n                    html+= '&nbsp;<div class=\"export-formats btn-group pull-right\" role=\"group\" >';\n                    html+= '    <button type=\"button\" class=\"btn btn-mini dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">';\n                    html+= lizDict['attributeLayers.toolbar.btn.data.export.title'];\n                    html+= '      <span class=\"caret\"></span>';\n                    html+= '    </button>';\n                    html+= '    <ul class=\"dropdown-menu\" role=\"menu\">';\n                    html+= '        <li><a href=\"#\" class=\"btn-export-attributeTable\">GeoJSON</a></li>';\n                    html+= '        <li><a href=\"#\" class=\"btn-export-attributeTable\">GML</a></li>';\n                    var exportFormats = lizMap.getVectorLayerResultFormat();\n                    for ( var i=0, len=exportFormats.length; i<len; i++ ) {\n                        var format = exportFormats[i].toLowerCase();\n                        if ( format != 'gml2' && format != 'gml3' && format != 'geojson' ) {\n                            html += '        <li><a href=\"#\" class=\"btn-export-attributeTable\">'+format+'</a></li>';\n                        }\n                    }\n                    html+= '    </ul>';\n                    html+= '</div>';\n                }\n\n                html+= '</div>'; // attribute-layer-action-bar\n\n                if( childHtml )\n                    alc= ' showChildren';\n                html+= '<div class=\"attribute-layer-content'+alc+'\">';\n                html+= '    <input type=\"hidden\" class=\"attribute-table-hidden-layer\" value=\"'+cleanName+'\">';\n                html+= '    <table id=\"attribute-layer-table-' + cleanName + '\" class=\"attribute-table-table table table-hover table-condensed table-striped order-column cell-border\" width=\"100%\"></table>';\n\n                html+= '</div>';  // attribute-layer-content\n\n                // Add children content\n                if( childHtml ){\n                    // Add children content : one tab per childlayer\n                    html+= '<div class=\"tabbable attribute-layer-child-content\">';\n                    // Ul content\n                    html+= '    <ul class=\"nav nav-tabs\">';\n                    for( var i in childHtml['tab-li'] ){\n                        var cLi = childHtml['tab-li'][i];\n                        html+= cLi;\n                    }\n                    html+= '    </ul>';\n                    html+= '    <div class=\"tab-content\">';\n                    // Tab content\n                    for( var i in childHtml['tab-content'] ){\n                        var cDiv = childHtml['tab-content'][i];\n                        html+= cDiv;\n                    }\n                    html+= '    </div>'; // tab-content\n                    html+= '</div>'; // tabbable\n                }\n\n                html+= '</div>';  // attribute-layer-main\n\n                // Right panel to show info\n                html+= '    <div class=\"attribute-layer-feature-panel\" id=\"attribute-table-panel-' + cleanName + '\" ></div>';\n\n                html+= '</div>'; // 'attribute-layer-' + cleanName\n\n                $('#attribute-table-container').append(html);\n\n                $('#attribute-layer-' + cleanName + ' button').tooltip( {\n                    placement: 'bottom'\n                } );\n\n                $('.btn-close-attribute-tab').click(function(){\n                    //there are multiple elements which has .closeTab icon so close the tab whose close icon is clicked\n                    var tabContentId = $(this).parent().attr(\"href\");\n                    $(this).parent().parent().remove(); //remove li of tab\n                    $('#attributeLayers-tabs a:last').tab('show'); // Select first tab\n                    $(tabContentId).remove(); //remove respective tab content\n                });\n\n                if( childHtml ){\n\n                   // Bind adjust child columns when children tab visibility change\n                    $('#attribute-layer-' + cleanName + ' div.attribute-layer-child-content ul li a[data-toggle=\"tab\"]').on('shown.bs.tab', function (e) {\n                        var target = $(e.target).attr(\"href\") // activated tab\n                        var dtable = $(target).find('table.dataTable');\n                        dtable.DataTable().tables().columns.adjust();\n                    });\n                }\n\n                if(limitDataToBbox){\n                    $('#attribute-layer-'+ cleanName + ' button.btn-refresh-table')\n                    .click(function(){\n                        // Reset button tooltip & style\n                        $(this)\n                        .attr('data-original-title', lizDict['attributeLayers.toolbar.btn.refresh.table.tooltip'])\n                        .removeClass('btn-warning');\n\n                        // Disable if the layer is not visible\n                        var layer = lizMap.map.getLayersByName( cleanName )[0];\n                        var ms = lizMap.map.getScale();\n                        if( layer ) {\n                            var lvisibility = layer.maxScale < ms && ms < layer.minScale;\n                            if( !lvisibility ){\n                                var msg = lizDict['attributeLayers.msg.layer.not.visible'];\n                                lizMap.addMessage( msg, 'info', true).attr('id','lizmap-attribute-message');\n                                return false;\n                            }\n                        }else{\n                            // do nothing if no layer found\n                            return false;\n                        }\n\n                        // Refresh table\n                        var aTable = '#attribute-layer-table-'+cleanName;\n                        var dFilter = null;\n                        $('#attribute-layer-main-'+cleanName+' > div.attribute-layer-content').hide();\n                        getAttributeFeatureData( lname, dFilter, null, 'extent', function(someName, someNameFilter, someNameFeatures, someNameAliases){\n                            buildLayerAttributeDatatable( someName, aTable, someNameFeatures, someNameAliases );\n                            $('#attribute-layer-main-'+cleanName+' > div.attribute-layer-content').show();\n                            refreshDatatableSize('#attribute-layer-main-'+ cleanName);\n                        });\n\n                        return false;\n                    })\n                    .hover(\n                        function(){ $(this).addClass('btn-primary'); },\n                        function(){ $(this).removeClass('btn-primary'); }\n                    );\n                }\n\n                if( childHtml ){\n                    $('#attribute-layer-'+ cleanName + ' button.btn-toggle-children')\n                    .click(function(){\n                        var parentDir = $(this).parents('div.attribute-layer-main');\n                        parentDir.find('div.attribute-layer-content').toggleClass('showChildren');\n                        parentDir.find('div.tabbable.attribute-layer-child-content').toggle();\n                        // Refresh parent table size\n                        refreshDatatableSize('#attribute-layer-main-'+ cleanName);\n                        return false;\n                    })\n                    .hover(\n                        function(){ $(this).addClass('btn-primary'); },\n                        function(){ $(this).removeClass('btn-primary'); }\n                    );\n\n                }\n\n                // Bind click on detail button\n                if( canPopup ){\n                    $('#attribute-layer-'+ cleanName + ' button.btn-detail-attributeTable')\n                    .click(function(){\n                        var aName = attributeLayersDic[ $(this).val() ];\n                        if( $(this).hasClass('active') ){\n                            $(this).removeClass('active btn-warning');\n                            $('#attribute-layer-main-' + cleanName ).removeClass('reduced');\n                            $('#attribute-table-panel-' + cleanName ).removeClass('visible');\n                        }\n                        else{\n                            $(this).addClass('active btn-warning');\n                            $('#attribute-layer-main-' + cleanName ).addClass('reduced');\n                            $('#attribute-table-panel-' + cleanName ).addClass('visible');\n                        }\n                        refreshDatatableSize('#attribute-layer-main-'+ cleanName);\n                        return false;\n                    })\n                    .hover(\n                        function(){ $(this).addClass('btn-primary'); },\n                        function(){ $(this).removeClass('btn-primary'); }\n                    );\n                }\n\n                // Bind click on \"unselect all\" button\n                $('#attribute-layer-'+ cleanName + ' button.btn-unselect-attributeTable')\n                .click(function(){\n                    var aName = attributeLayersDic[ $(this).val() ];\n                    // Send signal\n                    lizMap.events.triggerEvent(\"layerfeatureunselectall\",\n                        { 'featureType': aName, 'updateDrawing': true}\n                    );\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n\n                // Bind click on \"move selected to top\" button\n                $('#attribute-layer-'+ cleanName + ' button.btn-moveselectedtotop-attributeTable')\n                .click(function(){\n                    var aTable = '#attribute-layer-table-' + $(this).val();\n                    var dTable = $( aTable ).DataTable();\n                    var previousOrder = dTable.order();\n                    previousOrder = $.grep(previousOrder, function(o){\n                        return o[0] != 0;\n                    });\n                    var selectedOrder = [ [0, 'asc'] ];\n                    var newOrder = selectedOrder.concat(previousOrder);\n                    dTable.order( newOrder ).draw();\n\n                    // Scroll to top\n                    $(aTable).parents('div.attribute-layer-content').scrollTop(0);\n\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n\n\n                // Bind click on filter button\n                if( !startupFilter ){\n                    $('#attribute-layer-'+ cleanName + ' button.btn-filter-attributeTable')\n                    .click(function(){\n                        var aName = attributeLayersDic[ $(this).val() ];\n                        if( $(this).hasClass('active') ) {\n                            lizMap.events.triggerEvent( \"layerfeatureremovefilter\",\n                                { 'featureType': aName}\n                            );\n                            lizMap.lizmapLayerFilterActive = null;\n                        } else {\n                            lizMap.events.triggerEvent(\"layerfeaturefilterselected\",\n                                { 'featureType': aName}\n                            );\n                            lizMap.lizmapLayerFilterActive = aName;\n                        }\n                        return false;\n                    })\n                    .hover(\n                        function(){ $(this).addClass('btn-primary'); },\n                        function(){ $(this).removeClass('btn-primary'); }\n                    );\n                }\n\n                // Bind click on export buttons\n                $('#attribute-layer-'+ cleanName + ' a.btn-export-attributeTable')\n                .click(function(){\n                    var eFormat = $(this).text();\n                    if( eFormat == 'GML' )\n                        eFormat = 'GML3';\n                    var cleanName = $(this).parents('div.attribute-layer-main:first').attr('id').replace('attribute-layer-main-', '');\n                    var eName = attributeLayersDic[ cleanName ];\n                    lizMap.exportVectorLayer( eName, eFormat, limitDataToBbox );\n                    $(this).blur();\n                    return false;\n                });\n\n                // Bind click on createFeature button\n                $('#attribute-layer-'+ cleanName + ' button.btn-createFeature-attributeTable')\n                .click(function(){\n                    if ( $('#attribute-layer-'+ cleanName + ' tr.active').length != 1) {\n                        $('#lizmap-edition-message').remove();\n                        lizMap.addMessage( lizDict['attributeLayers.toolbar.btn.data.createChildFeature.no.actived'], 'info', true).attr('id','lizmap-edition-message');\n                        return false;\n                    }\n                    var parentFeatId = $('#attribute-layer-'+ cleanName + ' tr.active button.attribute-layer-feature-select').val();\n                    var parentLayerName = attributeLayersDic[ cleanName ];\n                    var parentLayerId = config.layers[parentLayerName]['id'];\n                    var aName = attributeLayersDic[ $(this).val() ];\n                    lizMap.getLayerFeature(parentLayerName, parentFeatId, function(parentFeat) {\n                        var lid = config.layers[aName]['id'];\n                        lizMap.launchEdition( lid, null, {layerId:parentLayerId,feature:parentFeat});\n                    });\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n\n                // Bind click on createFeature button via dropDown\n                $('#attribute-layer-'+ cleanName + ' a.btn-createFeature-attributeTable')\n                .click(function(){\n                    if ( $('#attribute-layer-'+ cleanName + ' tr.active').length != 1) {\n                        $('#lizmap-edition-message').remove();\n                        lizMap.addMessage( lizDict['attributeLayers.toolbar.btn.data.createChildFeature.no.actived'], 'info', true).attr('id','lizmap-edition-message');\n                        return false;\n                    }\n                    var parentFeatId = $('#attribute-layer-'+ cleanName + ' tr.active button.attribute-layer-feature-select').val();\n                    var parentLayerName = attributeLayersDic[ cleanName ];\n                    var parentLayerId = config.layers[parentLayerName]['id'];\n                    var selectedValue = $(this).attr('href').replace('#', '');\n                    var aName = attributeLayersDic[ selectedValue ];\n                    lizMap.getLayerFeature(parentLayerName, parentFeatId, function(parentFeat) {\n                        var lid = config.layers[aName]['id'];\n                        lizMap.launchEdition( lid, null, {layerId:parentLayerId,feature:parentFeat});\n                        $(this).blur();\n                    });\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n\n                // Bind click on linkFeatures button\n                $('#attribute-layer-'+ cleanName + ' a.btn-linkFeatures-attributeTable')\n                .click(function(){\n                    var selectedValue = $(this).attr('href').replace('#', '');\n                    $(this).blur();\n                    var cName = attributeLayersDic[ selectedValue ];\n                    var cId = config.layers[cName]['id'];\n                    var attrConfig = config.attributeLayers[cName];\n                    var p = [];\n                    var pName = attributeLayersDic[cleanName];\n                    var pId = config.layers[pName]['id'];\n                    var doQuery = false;\n\n                    if( 'pivot' in attrConfig\n                        && attrConfig['pivot'] == 'True'\n                        && cId in config.relations.pivot\n                    ){\n                        // Get parents info : layer id, fkey column in the pivot table for the parent, values of primary key for selected ids\n                        for( var parId in config.relations.pivot[cId] ){\n                            var par = buildLinkParameters( parId );\n                            if (!par)\n                                return false;\n                            par['id'] = parId;\n                            var parKey = config.relations.pivot[cId][parId];\n                            par['fkey'] = parKey;\n\n                            // Add parent info to the table\n                            p.push(par);\n\n                        }\n\n                        if( !( p.length == 2 )  )\n                            return false;\n\n                        doQuery = 'pivot';\n\n                    }else{\n\n                        var par = buildLinkParameters( pId );\n                        var chi = buildLinkParameters( cId );\n\n                        if (!par || !chi )\n                            return false;\n                        par['id'] = pId;\n                        // We take the primary key of the child layer (because 1:n relation )\n                        par['fkey'] = config.attributeLayers[cName]['primaryKey'];\n\n                        chi['id'] = cId;\n                        if( !( pId in config.relations ) )\n                            return false;\n                        for( var rp in config.relations[pId] ){\n                            var rpItem = config.relations[pId][rp];\n                            if( rpItem.referencingLayer == cId ){\n                                chi['fkey'] = rpItem.referencingField\n                            }else{\n                                continue;\n                            }\n                        }\n                        if( !('fkey' in chi ) )\n                            return false;\n\n                        p.push(par);\n                        p.push(chi);\n\n                        doQuery = '1n';\n\n                    }\n\n                    if( doQuery ){\n                        var service = OpenLayers.Util.urlAppend(lizUrls.edition\n                            ,OpenLayers.Util.getParameterString(lizUrls.params)\n                        );\n                        $.post(service.replace('getFeature','linkFeatures'),{\n                          features1: p[0]['id'] + ':' + p[0]['fkey'] + ':' + p[0]['selected'].join(),\n                          features2: p[1]['id'] + ':' + p[1]['fkey'] + ':' + p[1]['selected'].join(),\n                          pivot: cId\n\n                        }, function(data){\n                            // Show response message\n                            $('#lizmap-edition-message').remove();\n                            lizMap.addMessage( data, 'info', true).attr('id','lizmap-edition-message');\n\n                            // Unselect features of parent (or child)\n                            // And trigger table refresh\n                            if( doQuery == 'pivot' ){\n                                lizMap.events.triggerEvent(\"layerfeatureunselectall\",\n                                    { 'featureType': attributeLayersDic[cleanName], 'updateDrawing': true}\n                                );\n                                // Send signal saying edition has been done on pivot\n                                lizMap.events.triggerEvent(\"lizmapeditionfeaturecreated\",\n                                    { 'layerId': cId}\n                                );\n                            }else{\n                                lizMap.events.triggerEvent(\"layerfeatureunselectall\",\n                                    { 'featureType': cName, 'updateDrawing': true}\n                                );\n                                // Send signal saying edition has been done on pivot\n                                lizMap.events.triggerEvent(\"lizmapeditionfeaturemodified\",\n                                    { 'layerId': cId}\n                                );\n                            }\n                        });\n                    }\n\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n\n                // Bind click on btn-select-searched button\n                $('#attribute-layer-'+ cleanName + ' button.btn-select-searched').click(function(){\n                    var aName = attributeLayersDic[ $(this).val() ];\n\n                    // Send signal\n                    lizMap.events.triggerEvent(\"layerfeatureselectsearched\",\n                        { 'featureType': aName, 'updateDrawing': true}\n                    );\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n            }\n\n            function buildLinkParameters( layerId ){\n                var lp  = {};\n\n                // Get ids of selected feature\n                var getP = lizMap.getLayerConfigById( layerId, config.attributeLayers, 'layerId' );\n                if( !getP )\n                    return false;\n\n                lp['name'] = getP[0];\n\n                var idSelected = config.layers[ getP[0] ]['selectedFeatures'];\n                if( !( idSelected.length > 0 ) )\n                    return false;\n\n                // Get corresponding values of parent primary key column for these ids\n                var fi = [];\n                var features = config.layers[ getP[0] ]['features'];\n                if ( !features || Object.keys(features).length <= 0 )\n                    return false;\n\n                var primaryKey = getP[1]['primaryKey'];\n                var intRegex = /^[0-9]+$/;\n                for( var x in idSelected ) {\n                    var idFeat = idSelected[x];\n                    var afeat = features[idFeat];\n                    if( typeof afeat === \"undefined\" )\n                        continue;\n                    var pk = afeat.properties[primaryKey];\n                    if( !( intRegex.test(pk) ) )\n                        pk = \" '\" + pk + \"' \";\n                    fi.push( pk );\n                }\n                lp['selected'] = fi;\n\n                return lp;\n            }\n\n            function getChildrenHtmlContent( parentLayerName ) {\n\n                var childHtml = null;\n                var childDiv = [];\n                var childLi = [];\n                var childCreateButton = ''; var childCreateButtonItems = [];\n                var layerLinkButton = ''; var layerLinkButtonItems = [];\n                var lConfig = config.layers[parentLayerName];\n                if ( !lConfig )\n                  return childHtml;\n                var parentLayerId = lConfig['id'];\n                if( 'relations' in config && parentLayerId in config.relations) {\n                    var layerRelations = config.relations[parentLayerId];\n                    var childCount = 0;\n                    var childActive = 'active';\n                    for( var lid in layerRelations ) {\n                        var relation = layerRelations[lid];\n                        var childLayerConfigA = lizMap.getLayerConfigById(\n                            relation.referencingLayer,\n                            config.layers,\n                            'id'\n                        );\n                        if( childLayerConfigA\n                            &&  childLayerConfigA[0] in config.attributeLayers\n                        ){\n                            childCount+=1;\n                            if( childCount > 1)\n                                childActive = '';\n                            var childLayerConfig = childLayerConfigA[1];\n                            var childLayerName = childLayerConfigA[0];\n                            var childAttributeLayerConfig = config.attributeLayers[childLayerName];\n\n                            // Discard if the editor does not want this layer to be displayed in child table\n                            if( 'hideAsChild' in childAttributeLayerConfig && childAttributeLayerConfig['hideAsChild'] == 'True' )\n                                continue;\n\n                            // Build child table id by concatenating parent and child layer names\n                            var tabId = 'attribute-child-tab-' + lizMap.cleanName(parentLayerName) + '-' + lizMap.cleanName(childLayerName);\n\n                            // Build Div content for tab\n                            var cDiv = '<div class=\"tab-pane attribute-layer-child-content '+childActive+'\" id=\"'+ tabId +'\" >';\n                            var tId = 'attribute-layer-table-' + lizMap.cleanName(parentLayerName) + '-' + lizMap.cleanName(childLayerName);\n                            var tClass = 'attribute-table-table table table-hover table-condensed table-striped cell-border child-of-' + lizMap.cleanName(parentLayerName);\n                            cDiv+= '    <input type=\"hidden\" class=\"attribute-table-hidden-parent-layer\" value=\"'+lizMap.cleanName(parentLayerName)+'\">';\n                            cDiv+= '    <input type=\"hidden\" class=\"attribute-table-hidden-layer\" value=\"'+lizMap.cleanName(childLayerName)+'\">';\n                            cDiv+= '    <table id=\"' + tId  + '\" class=\"' + tClass + '\" width=\"100%\"></table>';\n                            cDiv+= '</div>';\n                            childDiv.push(cDiv);\n\n                            // Build li content for tab\n                            var cLi = '<li id=\"nav-tab-'+ tabId +'\" class=\"'+childActive+'\"><a href=\"#'+ tabId +'\" data-toggle=\"tab\">'+ childLayerConfig.title +'</a></li>';\n                            childLi.push(cLi);\n\n                            // Add create child feature button\n                            var canCreateChild = false;\n                            if( 'editionLayers' in config ){\n                                var editionConfig = lizMap.getLayerConfigById(\n                                    relation.referencingLayer,\n                                    config.editionLayers,\n                                    'layerId'\n                                );\n                                if( childLayerName in config.editionLayers ) {\n                                    var al = config.editionLayers[childLayerName];\n                                    if( al.capabilities.createFeature == \"True\" )\n                                        canCreateChild = true;\n                                }\n                            }\n\n                            if( canCreateChild ){\n                                // Button to create a new child : Usefull for both 1:n and n:m relation\n                                childCreateButtonItems.push( '<li><a href=\"#' + lizMap.cleanName(childLayerName) + '\" class=\"btn-createFeature-attributeTable\">' + childLayerConfig.title +'</a></li>' );\n                                layerLinkButtonItems.push( '<li><a href=\"#' + lizMap.cleanName(childLayerName) + '\" class=\"btn-linkFeatures-attributeTable\">' + childLayerConfig.title +'</a></li>' );\n                            }\n                        }\n                    }\n\n                }\n                if( childLi.length ){\n                    if( childCreateButtonItems.length > 0 ){\n                        childCreateButton+= '&nbsp;<div class=\"btn-group\" role=\"group\" >';\n                        childCreateButton+= '    <button type=\"button\" class=\"btn btn-mini dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">';\n                        childCreateButton+= lizDict['attributeLayers.toolbar.btn.data.createChildFeature.title'];\n                        childCreateButton+= '      <span class=\"caret\"></span>';\n                        childCreateButton+= '    </button>';\n                        childCreateButton+= '    <ul class=\"dropdown-menu\" role=\"menu\">';\n                        for( var i in  childCreateButtonItems){\n                            var li = childCreateButtonItems[i];\n                            childCreateButton+= li;\n                        }\n                        childCreateButton+= '    </ul>';\n                        childCreateButton+= '</div>';\n                    }\n                    if( layerLinkButtonItems.length > 0 ){\n                        layerLinkButton+= '&nbsp;<div class=\"btn-group\" role=\"group\" >';\n                        layerLinkButton+= '    <button type=\"button\" class=\"btn btn-mini dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">';\n                        layerLinkButton+= lizDict['attributeLayers.toolbar.btn.data.linkFeatures.title'];\n                        layerLinkButton+= '      <span class=\"caret\"></span>';\n                        layerLinkButton+= '    </button>';\n                        layerLinkButton+= '    <ul class=\"dropdown-menu\" role=\"menu\">';\n                        for( var i in  layerLinkButtonItems){\n                            var li = layerLinkButtonItems[i];\n                            layerLinkButton+= li;\n                        }\n                        layerLinkButton+= '    </ul>';\n                        layerLinkButton+= '</div>';\n                    }\n                    childHtml = {\n                        'tab-content': childDiv,\n                        'tab-li': childLi,\n                        'childCreateButton': childCreateButton,\n                        'layerLinkButton': layerLinkButton\n                    } ;\n                }\n                return childHtml;\n            }\n\n            // Refresh attribute table content for all children of a given layer\n            function refreshChildrenLayersContent( sourceTable, featureType, featId ) {\n                var feat = config.layers[featureType]['features'][featId];\n\n                if(!feat)\n                    return false;\n                var fp = feat.properties;\n\n                var lConfig = config.layers[featureType];\n                if ( !lConfig )\n                  return false;\n                var parentLayerId = lConfig['id'];\n\n                // Refresh recursively for direct children and other parent\n                if( 'relations' in config && parentLayerId in config.relations) {\n                    var layerRelations = config.relations[parentLayerId];\n                    for( var lid in layerRelations ) {\n                        var relation = layerRelations[lid];\n                        var childLayerConfigA = lizMap.getLayerConfigById(\n                            relation.referencingLayer,\n                            config.layers,\n                            'id'\n                        );\n                        if( childLayerConfigA\n                            && childLayerConfigA[0] in config.attributeLayers\n                        ){\n                            var childLayerName = childLayerConfigA[0];\n                            var childLayerConfig = childLayerConfigA[1];\n                            // Generate filter\n                            var filter = '';\n                            if( relation.referencingLayer == childLayerConfig.id ){\n                                filter = '\"' + relation.referencingField + '\" = ' + \"'\" + fp[relation.referencedField] + \"'\";\n                            }\n\n                            // Get child table id\n                            var childTable = sourceTable.replace( ' table:first', '' ) + '-' + lizMap.cleanName(childLayerName);\n\n                            // Fill in attribute table for child\n                            if( childLayerName in config.attributeLayers )\n                                // Discard if the editor does not want this layer to be displayed in child table\n                                if( 'hideAsChild' in config.attributeLayers[childLayerName] && config.attributeLayers[childLayerName]['hideAsChild'] == 'True' )\n                                    continue;\n                                getDirectChildData( childLayerName, filter, childTable);\n\n                        }\n                    }\n                }\n            }\n\n\n            function getDirectChildData( childLayerName, filter, childTable ){\n                // Get features\n                getAttributeFeatureData(childLayerName, filter, null, 'extent', function(chName, chFilter, chFeatures, chAliases){\n                    buildLayerAttributeDatatable( chName, childTable, chFeatures, chAliases );\n                });\n            }\n\n            var lizdelay = (function(){\n                var timer = 0;\n                return function(callback, ms){\n                    clearTimeout (timer);\n                    timer = setTimeout(callback, ms);\n                };\n            })();\n\n            function refreshLayerAttributeDatatable(aName, aTable, cFeatures, aCallback) {\n                // Get config\n                var lConfig = config.layers[aName];\n                // get cleaned name\n                var cleanName = lizMap.cleanName( aName );\n\n                // Detect if table is parent or child\n                var isChild = true;\n                let parentLayerID = '';\n                if (['#attribute-layer-table-', '#edition-table-'].includes(aTable.replace(cleanName, ''))){\n                    isChild = false;\n                }else{\n                    let parentLayerName = '';\n                    if (aTable.startsWith('#attribute-layer-table-')){\n                        parentLayerName =  aTable.replace('#attribute-layer-table-', '').split('-')[0];\n                    } else if (aTable.startsWith('#edition-table-')) {\n                        parentLayerName = aTable.replace('#edition-table-', '').split('-')[0];\n                    }\n\n                    if(parentLayerName){\n                        parentLayerID = config.layers[parentLayerName]['id'];\n                    }\n                }\n\n                // Pivot table ?\n                var isPivot = false;\n                if( isChild\n                    && 'pivot' in config.attributeLayers[aName]\n                    && config.attributeLayers[aName]['pivot'] == 'True'\n                ){\n                    isPivot = true;\n                }\n\n                // Hidden fields\n                var hiddenFields = [];\n                if( aName in config.attributeLayers\n                    && 'hiddenFields' in config.attributeLayers[aName]\n                    && config.attributeLayers[aName]['hiddenFields']\n                ){\n                    var hf = config.attributeLayers[aName]['hiddenFields'].trim();\n                    hiddenFields = hf.split(/[\\s,]+/);\n                }\n\n                // Check edition capabilities\n                var canEdit = false;\n                var canDelete = false;\n                if( 'editionLayers' in config && aName in config.editionLayers ) {\n                    var al = config.editionLayers[aName];\n                    if( al.capabilities.modifyAttribute == \"True\" || al.capabilities.modifyGeometry == \"True\" )\n                        canEdit = true;\n                    if( al.capabilities.deleteFeature == \"True\" )\n                        canDelete = true;\n                }\n\n                cFeatures = typeof cFeatures !== 'undefined' ?  cFeatures : null;\n                if( !cFeatures ){\n                    // features is an object, let's transform it to an array\n                    // XXX IE compat: Object.values is not available on IE...\n                    var features = config.layers[aName]['features'];\n                    cFeatures = Object.keys(features).map(function (key) {\n                        return features[key];\n                    });\n                }\n\n                if( cFeatures && cFeatures.length > 0 ){\n                    // Format features for datatable\n                    var ff = formatDatatableFeatures(\n                        cFeatures,\n                        lConfig['geometryType'],\n                        canEdit,\n                        canDelete,\n                        isChild,\n                        isPivot,\n                        hiddenFields,\n                        lConfig['selectedFeatures']\n                    );\n                    var foundFeatures = ff.foundFeatures;\n                    var dataSet = ff.dataSet;\n\n                    // Datatable configuration\n                    if ( $.fn.dataTable.isDataTable( aTable ) ) {\n                        var oTable = $( aTable ).dataTable();\n                        oTable.fnClearTable();\n                        oTable.fnAddData( dataSet );\n                    }\n                    lConfig['features'] = foundFeatures;\n                }\n\n                if ( !cFeatures || cFeatures.length == 0 ){\n                    if ( $.fn.dataTable.isDataTable( aTable ) ) {\n                        var oTable = $( aTable ).dataTable();\n                        oTable.fnClearTable();\n                    }\n                    $(aTable).hide();\n\n                    $('#attribute-layer-'+ cleanName +' span.attribute-layer-msg').html(\n                        lizDict['attributeLayers.toolbar.msg.data.nodata'] + ' ' + lizDict['attributeLayers.toolbar.msg.data.extent']\n                    ).addClass('failure');\n                } else {\n                    $(aTable).show();\n                }\n\n                if (aCallback)\n                    aCallback(aName,aTable);\n\n                return false;\n            }\n\n            function buildLayerAttributeDatatable(aName, aTable, cFeatures, cAliases, aCallback ) {\n                // Get config\n                var lConfig = config.layers[aName];\n\n                // get cleaned name\n                var cleanName = lizMap.cleanName( aName );\n\n                cAliases = typeof cAliases !== 'undefined' ?  cAliases : null;\n                if( !cAliases ){\n                    cAliases = lConfig['alias'];\n                }\n                for( const key in cAliases){\n                    if(cAliases[key]==\"\"){\n                        cAliases[key]=key;\n                    }\n                }\n                var cTypes = {};\n                if( 'types' in config.layers[aName] )\n                    cTypes = config.layers[aName]['types'];\n\n                // Detect if table is parent or child\n                var isChild = true;\n                if( aTable.replace( cleanName, '') == '#attribute-layer-table-' )\n                    isChild = false;\n\n                // Pivot table ?\n                var isPivot = false;\n                if( isChild\n                    && 'pivot' in config.attributeLayers[aName]\n                    && config.attributeLayers[aName]['pivot'] == 'True'\n                ){\n                    isPivot = true;\n                }\n\n                // Hidden fields\n                var hiddenFields = [];\n                if( aName in config.attributeLayers\n                    && 'hiddenFields' in config.attributeLayers[aName]\n                    && config.attributeLayers[aName]['hiddenFields']\n                ){\n                    var hf = config.attributeLayers[aName]['hiddenFields'].trim();\n                    hiddenFields = hf.split(/[\\s,]+/);\n                }\n\n                // Check edition capabilities\n                var canEdit = false;\n                var canDelete = false;\n                if( 'editionLayers' in config && aName in config.editionLayers ) {\n                    var al = config.editionLayers[aName];\n                    if( al.capabilities.modifyAttribute == \"True\" || al.capabilities.modifyGeometry == \"True\" )\n                        canEdit = true;\n                    if( al.capabilities.deleteFeature == \"True\" )\n                        canDelete = true;\n                }\n\n                cFeatures = typeof cFeatures !== 'undefined' ?  cFeatures : null;\n                if( !cFeatures ){\n                    // features is an object, let's transform it to an array\n                    // XXX IE compat: Object.values is not available on IE...\n                    var features = config.layers[aName]['features'];\n                    cFeatures = Object.keys(features).map(function (key) {\n                        return features[key];\n                    });\n                }\n\n                var atFeatures = cFeatures;\n                var dataLength = atFeatures.length;\n\n                if( cFeatures && cFeatures.length > 0 ){\n\n                    // Create columns for datatable\n                    var cdc = createDatatableColumns(aName, atFeatures, lConfig['geometryType'], canEdit, canDelete, isChild, isPivot, hiddenFields, cAliases, cTypes);\n                    var columns = cdc.columns;\n                    var firstDisplayedColIndex = cdc.firstDisplayedColIndex;\n\n                    // Format features for datatable\n                    var ff = formatDatatableFeatures(\n                        atFeatures,\n                        lConfig['geometryType'],\n                        canEdit,\n                        canDelete,\n                        isChild,\n                        isPivot,\n                        hiddenFields,\n                        lConfig['selectedFeatures']\n                    );\n                    var foundFeatures = ff.foundFeatures;\n                    var dataSet = ff.dataSet;\n\n                    // Fill in the features object\n                    // only when necessary : object is empty or is not child or (is child and no full features list in the object)\n                    var refillFeatures = false;\n                    var dLen = lConfig['features'] ? Object.keys(lConfig['features']).length : 0;\n                    if( dLen == 0 ){\n                        refillFeatures = true;\n                        if( !isChild ){\n                            lConfig['featuresFullSet'] = true;\n                        }\n                    }\n                    else{\n                        if( isChild ){\n                            if( !lConfig['featuresFullSet'] ){\n                                refillFeatures = true;\n                            }\n                        }else{\n                            lConfig['featuresFullSet'] = true;\n                            refillFeatures = true;\n                        }\n                    }\n                    if( refillFeatures  )\n                        lConfig['features'] = foundFeatures;\n\n                    lConfig['alias'] = cAliases;\n                    // Datatable configuration\n                    if ( $.fn.dataTable.isDataTable( aTable ) ) {\n                        var oTable = $( aTable ).dataTable();\n                        oTable.fnClearTable();\n                        oTable.fnAddData( dataSet );\n                    }\n                    else {\n                        // Search while typing in text input\n                        // Deactivate if too many items\n                        var searchWhileTyping = true;\n                        if( dataLength > 50000 )\n                            searchWhileTyping = false;\n\n                        var myDom = '<<t>ipl>';\n                        if( searchWhileTyping ) {\n                            $('#attribute-layer-search-' + cleanName).on( 'keyup', function (e){\n                            var searchVal = this.value;\n                                lizdelay(function(){\n                                    oTable.fnFilter( searchVal );\n                                }, 500 );\n                            });\n                        }else{\n                            myDom = '<<t>ipl>';\n                        }\n\n                        $( aTable ).dataTable( {\n                             data: dataSet\n                            ,columns: columns\n                            , drawCallback(settings){\n                                const api = new $.fn.dataTable.Api(settings);\n\n                                // Check editable features\n                                if (canEdit || canDelete) {\n                                    // Get editable features\n                                    $.post(lizUrls.edition.replace('getFeature', 'editableFeatures'), {\n                                        repository: lizUrls.params.repository,\n                                        project: lizUrls.params.project,\n                                        layerId: lConfig.id\n                                    }, function (data) {\n                                        if ('success' in data &&\n                                            data['success'] &&\n                                            'status' in data &&\n                                            data['status'] == 'restricted') {\n                                            let editableFeaturesId = [];\n\n                                            for (const feature of data.features) {\n                                                editableFeaturesId.push('#' + feature.id.split('.')[1]);\n                                            }\n                                            // Disable edition and delete actions buttons when user has not those rights\n                                            api.table().cells(':not(' + editableFeaturesId.join(',') + ')', [2, 3])\n                                                .nodes()\n                                                .to$()\n                                                .children('button')\n                                                .prop('disabled', true);\n                                        }\n                                    });\n                                }\n                            }\n                            ,initComplete: function(settings, json) {\n                                const api = new $.fn.dataTable.Api(settings);\n                                const tableId = api.table().node().id;\n                                const featureType = tableId.split('attribute-layer-table-')[1];\n\n                                // Trigger event telling attribute table is ready\n                                lizMap.events.triggerEvent(\"attributeLayerContentReady\",\n                                    {\n                                        'featureType': featureType\n                                    }\n                                );\n                            }\n                            ,order: [[ firstDisplayedColIndex, \"asc\" ]]\n                            ,language: { url:lizUrls[\"dataTableLanguage\"] }\n                            ,deferRender: true\n                            ,createdRow: function ( row, data, dataIndex ) {\n                                if ( $.inArray( data.DT_RowId.toString(), lConfig['selectedFeatures'] ) != -1\n                                ) {\n                                    $(row).addClass('selected');\n                                    data.lizSelected = 'a';\n                                }\n                            }\n                            ,dom: myDom\n                            ,pageLength: 50\n                            ,scrollY: '95%'\n                            ,scrollX: '100%'\n\n                        } );\n\n                        var oTable = $( aTable ).dataTable();\n\n                        if( !searchWhileTyping )\n                            $('#attribute-layer-search-' + cleanName).hide();\n\n                        // Bind button which clears top-left search input content\n                        $('#attribute-layer-search-' + cleanName).next('.clear-layer-search').click(function(){\n                            $('#attribute-layer-search-' + cleanName).val('').focus().keyup();\n                        });\n\n                        // Unbind previous events on page\n                        $( aTable ).on( 'page.dt', function() {\n                            // unbind previous events\n                            $(aTable +' tr').unbind('click');\n                            $(aTable +' tr td button').unbind('click');\n                        });\n\n                        // Bind events when drawing table\n                        $( aTable ).on( 'draw.dt', function() {\n\n                            $(aTable +' tr').unbind('click');\n                            $(aTable +' tr td button').unbind('click');\n\n                            // Bind event when users click anywhere on the table line to highlight\n                            bindTableLineClick(aName, aTable);\n\n                            // Bind event on select button\n                            bindTableSelectButton(aName, aTable);\n\n                            // Bind event on zoom buttons\n                            if(  config.layers[aName]['geometryType'] != 'none'\n                                    && config.layers[aName]['geometryType'] != 'unknown'\n                            ) {\n                                bindTableZoomButton(aName, aTable);\n                            }\n\n                            // Bind event on edit button\n                            if( canEdit ) {\n                                bindTableEditButton(aName, aTable);\n                            }\n\n                            // Bind event on delete button\n                            if( canDelete ) {\n                                bindTableDeleteButton(aName, aTable);\n                            }\n\n                            // Bind event on unlink button\n                            if( canEdit && isChild && !isPivot ) {\n                                bindTableUnlinkButton(aName, aTable);\n                            }\n\n                            // Refresh size\n                            var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n\n                            refreshDatatableSize('#' + mycontainerId);\n\n                            return false;\n\n                        });\n                    }\n                }\n\n                if ( !cFeatures || cFeatures.length == 0 ){\n                    if ( $.fn.dataTable.isDataTable( aTable ) ) {\n                        var oTable = $( aTable ).dataTable();\n                        oTable.fnClearTable();\n                    }\n                    $(aTable).hide();\n\n                    $('#attribute-layer-'+ cleanName +' span.attribute-layer-msg').html(\n                        lizDict['attributeLayers.toolbar.msg.data.nodata'] + ' ' + lizDict['attributeLayers.toolbar.msg.data.extent']\n                    ).addClass('failure');\n\n                } else {\n                    $(aTable).show();\n\n                }\n\n                if (aCallback)\n                    aCallback(aName,aTable);\n\n                return false;\n            }\n\n            function valueMapInAttributeTable( aName, data, type, full, meta ){\n                // Translate field ( language translation OR code->label translation )\n                var colMeta = meta.settings.aoColumns[meta.col];\n                var colName = colMeta.mData\n                var translation_dict = null;\n                var tdata = data;\n                if (data || data === 0) {\n                    tdata = lizMap.translateWfsFieldValues(aName, colName, data.toString(), translation_dict);\n                }\n                // lizMap.translateWfsFieldValues() change `data` type integer to string\n                // so we return original `data` if its value has not changed or is null\n                // it avoids wrong sorting in attribute table column\n                if (tdata == data || tdata === null) {\n                    tdata = data;\n                }\n\n                return tdata;\n            }\n\n            function createDatatableColumns(aName, atFeatures, geometryType, canEdit, canDelete, isChild, isPivot, hiddenFields, cAliases, cTypes){\n                var columns = [];\n                var firstDisplayedColIndex = 0;\n\n                // Column with selected status\n                columns.push( {\"data\": \"lizSelected\", \"width\": \"25px\", \"searchable\": false, \"sortable\": true, \"visible\": false} );\n                firstDisplayedColIndex+=1;\n\n                // Select tool\n                columns.push( { \"data\": \"select\", \"width\": \"25px\", \"searchable\": false, \"sortable\": false} );\n                firstDisplayedColIndex+=1;\n\n                if( canEdit ){\n                    columns.push( {\"data\": \"edit\", \"width\": \"25px\", \"searchable\": false, \"sortable\": false} );\n                    firstDisplayedColIndex+=1;\n                }\n                if( canDelete ){\n                    columns.push( {\"data\": \"delete\", \"width\": \"25px\", \"searchable\": false, \"sortable\": false} );\n                    firstDisplayedColIndex+=1;\n                }\n\n                if( canEdit && isChild && !isPivot){\n                    columns.push( {\"data\": \"unlink\", \"width\": \"25px\", \"searchable\": false, \"sortable\": false} );\n                    firstDisplayedColIndex+=1;\n                }\n\n                if( geometryType != 'none'\n                    && geometryType != 'unknown'\n                ){\n                    columns.push( {\"data\": \"zoom\", \"width\": \"25px\", \"searchable\": false, \"sortable\": false} );\n                    columns.push( {\"data\": \"center\", \"width\": \"25px\", \"searchable\": false, \"sortable\": false} );\n                    firstDisplayedColIndex+=2;\n                }\n\n                // Add column for each field\n                for (var idx in atFeatures[0].properties){\n                    // Do not add hidden fields\n                    if( ($.inArray(idx, hiddenFields) > -1) )\n                        continue;\n                    var colConf = { \"mData\": idx, \"title\": cAliases[idx] };\n\n                    // Check if we need to replace url or media by link\n                    // Add function for any string cell\n                    // First check if the col is number\n                    if (idx in cTypes){\n                        switch (cTypes[idx]) {\n                            case 'integer':\n                            case 'int':\n                            case 'unsignedInt':\n                            case 'long':\n                            case 'unsignedLong':\n                                colConf['mRender'] = function(data, type, full, meta ){\n                                    // Translate field ( language translation OR code->label translation )\n                                    return valueMapInAttributeTable( aName, data, type, full, meta );\n                                };\n\n                                colConf['className'] = 'text-right';\n                                break;\n                            case 'decimal':\n                            case 'double':\n                                colConf['mRender'] = function( data, type, full, meta ){\n                                    return parseFloat(data);\n                                }\n                                colConf['className'] = 'text-right';\n                                break;\n                            case 'date':\n                                colConf['className'] = 'text-center';\n                                break;\n                            default:\n                                colConf['mRender'] = function( data, type, full, meta ){\n                                    // Translate field ( language translation OR code->label translation )\n                                    var tdata = valueMapInAttributeTable( aName, data, type, full, meta );\n\n                                    // Replace media and URL with links\n                                    if( !tdata || !( typeof tdata === 'string') )\n                                        return tdata;\n                                    if( tdata.substr(0,6) == 'media/' || tdata.substr(0,7) == '/media/' || tdata.substr(0,9) == '../media/'){\n                                        var rdata = tdata;\n                                        var colMeta = meta.settings.aoColumns[meta.col];\n                                        if( tdata.substr(0,7) == '/media/' )\n                                            rdata = tdata.slice(1);\n                                        return '<a href=\"' + mediaLinkPrefix + '&path=' + rdata + '\" target=\"_blank\">' + colMeta.title + '</a>';\n                                    }\n                                    else if( tdata.substr(0,4) == 'http' || tdata.substr(0,3) == 'www' ){\n                                        var rdata = tdata;\n                                        if(tdata.substr(0,3) == 'www')\n                                            rdata = 'http://' + tdata;\n                                        return '<a href=\"' + rdata + '\" target=\"_blank\">' + tdata + '</a>';\n                                    }\n                                    else\n                                        return tdata;\n                                }\n                        }\n                    }\n                    columns.push( colConf );\n                }\n\n                var colToReturn = {\n                    'columns': columns,\n                    'firstDisplayedColIndex': firstDisplayedColIndex\n                };\n\n                // Reorder and hide columns from QGIS attributetableconfig property\n                if(\n                    'attributetableconfig' in config.attributeLayers[aName]\n                    && config.attributeLayers[aName]['attributetableconfig']\n                    && !$.isEmptyObject(config.attributeLayers[aName]['attributetableconfig']['columns'])\n                ){\n                    var atc = config.attributeLayers[aName]['attributetableconfig']['columns']['column'];\n                    if(atc.length == 0){\n                        return colToReturn;\n                    }\n                    var lizcols = columns.slice(0, firstDisplayedColIndex);\n                    var newcolumns = columns.slice(firstDisplayedColIndex);\n\n                    var newpos = 0;\n                    for(var x in atc){\n                        var colx = atc[x];\n                        // Do nothing if the item does not reference a field\n                        if(colx.attributes.type != 'field')\n                            continue;\n                        var fieldname = colx.attributes.name;\n                        var colhidden = colx.attributes.hidden;\n\n                        // Rearrange columns\n                        for (var i=0; i < newcolumns.length; i++) {\n                            // move item\n                            if ('mData' in newcolumns[i] && newcolumns[i].mData === fieldname) {\n                                // adds it back to the good position if not declared hidden\n                                if( colhidden == \"1\" ){\n                                    // Remove the item\n                                    var a = newcolumns.splice(i,1);\n                                }else{\n                                    // Move the item\n                                    var cfrom = i;\n                                    newcolumns.splice(newpos, 0, newcolumns.splice(cfrom,1)[0]);\n                                    newpos+= 1;\n                                }\n                                break;\n                            }\n                        }\n                    }\n\n                    var newcolumnsfinal = lizcols.concat(newcolumns)\n                    colToReturn['columns'] = newcolumnsfinal;\n                } else if (\n                    'columns' in config.layers[aName]\n                    && config.layers[aName]['columns']\n                    && Object.keys(config.layers[aName]['columns']).length > 0\n                ) {\n                    var lizcols = columns.slice(0, firstDisplayedColIndex);\n                    var newcolumns = columns.slice(firstDisplayedColIndex);\n\n                    var newpos = 0;\n                    // columns is an object with key as integer\n                    for (const key in config.layers[aName]['columns']) {\n                        const fieldname = config.layers[aName]['columns'][key];\n                        // Rearrange columns\n                        for (var i=0; i < newcolumns.length; i++) {\n                            // move item\n                            if ('mData' in newcolumns[i] && newcolumns[i].mData === fieldname) {\n                                // Move the item\n                                var cfrom = i;\n                                newcolumns.splice(newpos, 0, newcolumns.splice(cfrom,1)[0]);\n                                newpos+= 1;\n                            }\n                        }\n                    }\n\n                    var newcolumnsfinal = lizcols.concat(newcolumns)\n                    colToReturn['columns'] = newcolumnsfinal;\n                }\n\n                return colToReturn;\n            }\n\n\n            function formatDatatableFeatures(atFeatures, geometryType, canEdit, canDelete, isChild, isPivot, hiddenFields, selectedFeatures){\n                var dataSet = [];\n                var foundFeatures = {};\n                atFeatures.forEach(function(feat) {\n                    var line = {};\n\n                    // add feature to layer global data\n                    var fid = feat.id.split('.')[1];\n                    foundFeatures[fid] = feat;\n\n                    // Add row ID\n                    line['DT_RowId'] = fid;\n                    line['lizSelected'] = 'z';\n\n                    if( selectedFeatures && $.inArray( fid, selectedFeatures ) != -1 )\n                        line.lizSelected = 'a';\n\n                    // Build table lines\n                    var selectCol = '<button class=\"btn btn-mini attribute-layer-feature-select checkbox\" value=\"'+fid+'\" title=\"' + lizDict['attributeLayers.btn.select.title'] + '\"><i class=\"icon-ok\"></i></button>';\n                    line['select'] = selectCol;\n\n                    // Edit button\n                    if( canEdit ) {\n                        var editCol = '<button class=\"btn btn-mini attribute-layer-feature-edit\" value=\"'+fid+'\" title=\"' + lizDict['attributeLayers.btn.edit.title'] + '\"><i class=\"icon-pencil\"></i></button>';\n                        line['edit'] = editCol;\n                    }\n\n                    // Delete button\n                    if( canDelete ) {\n                        var delIcon = 'icon-trash';\n                        var delTitle = lizDict['attributeLayers.btn.delete.title'];\n                        if( isChild && isPivot ){\n                            delIcon = 'icon-minus';\n                            delTitle = lizDict['attributeLayers.btn.remove.link.title'];\n                        }\n                        var deleteCol = '<button class=\"btn btn-mini attribute-layer-feature-delete\" value=\"'+fid+'\" title=\"' + delTitle + '\"><i class=\"'+delIcon+'\"></i></button>';\n                        line['delete'] = deleteCol;\n                    }\n\n                    // Unlink button\n                    if( canEdit && isChild && !isPivot ) {\n\n                        var unlinkIcon = 'icon-minus';\n                        var unlinkTitle = lizDict['attributeLayers.btn.remove.link.title'];\n                        var unlinkCol = '<button class=\"btn btn-mini attribute-layer-feature-unlink\" value=\"'+fid+'\" title=\"' + unlinkTitle + '\"><i class=\"'+unlinkIcon+'\"></i></button>';\n                        line['unlink'] = unlinkCol;\n                    }\n\n                    if( geometryType != 'none'\n                        && geometryType != 'unknown'\n                    ){\n                        var zoomCol = '<button class=\"btn btn-mini attribute-layer-feature-focus zoom\" value=\"'+fid+'\" title=\"' + lizDict['attributeLayers.btn.zoom.title'] + '\"><i class=\"icon-zoom-in\"></i></button>';\n                        line['zoom'] = zoomCol;\n\n                        var centerCol = '<button class=\"btn btn-mini attribute-layer-feature-focus center\" value=\"'+fid+'\" title=\"' + lizDict['attributeLayers.btn.center.title'] + '\"><i class=\"icon-screenshot\"></i></button>';\n                        line['center'] = centerCol;\n                    }\n\n                    for (var idx in feat.properties){\n                        if( ($.inArray(idx, hiddenFields) > -1) )\n                            continue;\n                        var prop = feat.properties[idx];\n                        line[idx] = prop;\n                    }\n\n\n                    dataSet.push( line );\n                });\n                return {\n                    'dataSet': dataSet,\n                    'foundFeatures': foundFeatures\n                };\n            }\n\n            function bindTableLineClick(aName, aTable){\n                $(aTable +' tr').click(function() {\n\n                    $(aTable +' tr').removeClass('active');\n                    $(this).addClass('active');\n\n                    // Get corresponding feature\n                    var featId = $(this).find('button.attribute-layer-feature-select').val();\n\n                    // Send signal\n                    lizMap.events.triggerEvent(\"layerfeaturehighlighted\",\n                        { 'sourceTable': aTable, 'featureType': aName, 'fid': featId}\n                    );\n\n                    // Display popup for the feature\n                    var lConfig = config.layers[aName];\n                    if( lConfig && lConfig['popup'] == 'True' ){\n                        var feat = lConfig['features'][featId];\n\n                        var parentLayerCleanName = aTable.replace('#attribute-layer-table-', '').split('-');\n                        parentLayerCleanName = parentLayerCleanName[0];\n\n                        $('#attribute-table-panel-' + parentLayerCleanName ).html('');\n\n                        lizMap.getFeaturePopupContent( aName, feat, function(data){\n                            $('#attribute-table-panel-' + parentLayerCleanName ).html(data);\n\n                            // Trigger event\n                            lizMap.events.triggerEvent('lizmappopupdisplayed_inattributetable'\n                            );\n\n                            var closeButton = '<a class=\"close-attribute-feature-panel pull-right\" href=\"#\"><i class=\"icon-remove\"></i></a>'\n                            $('#attribute-table-panel-' + parentLayerCleanName + ' h4').append(closeButton);\n\n                            $('#attribute-table-panel-' + parentLayerCleanName + ' h4 a.close-attribute-feature-panel').click(function(){\n                                // Hide panel\n                                $('#attribute-layer-main-' + parentLayerCleanName ).removeClass('reduced');\n                                $('#attribute-table-panel-' + parentLayerCleanName ).removeClass('visible').html('');\n                                // Deactivate Detail button\n                                $('#attribute-layer-'+ parentLayerCleanName + ' button.btn-detail-attributeTable').removeClass('active btn-warning');\n\n                            });\n                        });\n                    }\n                });\n            }\n\n            function bindTableSelectButton(aName, aTable, aClass){\n                $(aTable +' tr td button.attribute-layer-feature-select').click(function() {\n\n                    // Trigger click to highlight feature;\n                    $(this).parents('tr:first').click();\n\n                    // Get feature id\n                    var featId = $(this).val();\n\n                    // Send signal to select the feature\n                    lizMap.events.triggerEvent(\"layerfeatureselected\",\n                        { 'featureType': aName, 'fid': featId, 'updateDrawing': true }\n                    );\n\n                    lizMap.events.triggerEvent(\"layerfeaturehighlighted\",\n                        { 'sourceTable': aTable, 'featureType': aName, 'fid': featId}\n                    );\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n            }\n\n            function bindTableZoomButton(aName, aTable){\n                // Zoom or center to selected feature on zoom button click\n                $(aTable +' tr td button.attribute-layer-feature-focus').click(function() {\n                    // Read feature\n                    var featId = $(this).val();\n                    var zoomAction = 'zoom';\n                    if( $(this).hasClass('center') )\n                        zoomAction = 'center';\n                    lizMap.zoomToFeature( aName, featId, zoomAction );\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n            }\n\n            function bindTableEditButton(aName, aTable){\n                $(aTable +' tr td button.attribute-layer-feature-edit').click(function() {\n                    var featId = $(this).val();\n                    // trigger edition\n                    var lid = config.layers[aName]['id'];\n                    lizMap.launchEdition( lid, featId, null);\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n            }\n\n            function bindTableDeleteButton(aName, aTable){\n                $(aTable +' tr td button.attribute-layer-feature-delete').click(function() {\n                    var featId = $(this).val();\n                    // trigger deletion\n                    var lid = config.layers[aName]['id'];\n                    deleteEditionFeature( lid, featId );\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n            }\n\n            function bindTableUnlinkButton(aName, aTable){\n                $(aTable +' tr td button.attribute-layer-feature-unlink').click(function() {\n                    // Get child feature id clicked\n                    var featId = $(this).val();\n                    // Get child layer id\n                    var cId = config.layers[aName]['id'];\n                    // Get parent layer name and id\n                    var pName = $(aTable).parents('div.attribute-layer-main:first').attr('id').replace('attribute-layer-main-', '');\n                    var pId = config.layers[pName]['id'];\n\n                    // Get foreign key column\n                    var cFkey = null;\n                    if( !( pId in config.relations ) )\n                        return false;\n                    for( var rp in config.relations[pId] ){\n                        var rpItem = config.relations[pId][rp];\n                        if( rpItem.referencingLayer == cId ){\n                            cFkey = rpItem.referencingField\n                        }else{\n                            continue;\n                        }\n                    }\n                    if( !cFkey )\n                        return false;\n\n                    // Get features for the child layer\n                    var features = config.layers[aName]['features'];\n                    if ( !features || Object.keys(features).length <= 0 )\n                        return false;\n\n                    // Get primary key value for clicked child item\n                    var cc = lizMap.getLayerConfigById(\n                        cId,\n                        config.attributeLayers,\n                        'layerId'\n                    );\n\n                    if( !cc )\n                        return false;\n                    var primaryKey = cc[1]['primaryKey'];\n                    var afeat = features[featId];\n                    if( typeof afeat === \"undefined\" )\n                        return false;\n                    var cPkeyVal = afeat.properties[primaryKey];\n                    // Check if pkey is integer\n                    var intRegex = /^[0-9]+$/;\n                    if( !( intRegex.test(cPkeyVal) ) )\n                        cPkeyVal = \" '\" + cPkeyVal + \"' \";\n                    var eService = OpenLayers.Util.urlAppend(lizUrls.edition\n                        ,OpenLayers.Util.getParameterString(lizUrls.params)\n                    );\n\n                    $.post(eService.replace('getFeature','unlinkChild'),{\n                      lid: cId,\n                      pkey: primaryKey,\n                      pkeyval: cPkeyVal,\n                      fkey: cFkey\n                    }, function(data){\n                        // Show response message\n                        $('#lizmap-edition-message').remove();\n                        lizMap.addMessage( data, 'info', true).attr('id','lizmap-edition-message');\n\n                        // Send signal saying edition has been done on table\n                        lizMap.events.triggerEvent(\"lizmapeditionfeaturemodified\",\n                            { 'layerId': cId}\n                        );\n\n                    });\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n            }\n\n            function bindEditTableEditButton(aName, aTable){\n                $(aTable +' tr td button.attribute-layer-feature-edit').click(function() {\n                    var featId = $(this).val();\n                    // trigger edition\n                    var lid = config.layers[aName]['id'];\n                    // get info from the form\n                    var formFeatureId = $('#edition-form-container form input[name=\"liz_featureId\"]').val();\n                    var formLayerId = $('#edition-form-container form input[name=\"liz_layerId\"]').val();\n                    // get parent layer config\n                    var getParentLayerConfig = lizMap.getLayerConfigById( formLayerId );\n                    var parentLayerName = getParentLayerConfig[0];\n                    if ( aName in config.attributeLayers ) {\n                        // get featureType layer config\n                        var layerConfig = config.attributeLayers[aName];\n                        //get relation\n                        var relation = getRelationInfo(formLayerId,layerConfig.layerId);\n                        if( relation != null ) {\n                            lizMap.getLayerFeature(parentLayerName, formFeatureId, function(feat) {\n                                lizMap.launchEdition( lid, featId, {layerId:formLayerId,feature:feat});\n                            });\n                        }\n                    }\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n            }\n\n            function getEditionChildData( childLayerName, filter, childTable ){\n                // Get features\n                getAttributeFeatureData(childLayerName, filter, null, 'extent', function(chName, chFilter, chFeatures, chAliases){\n                    buildLayerAttributeDatatable( chName, childTable, chFeatures, chAliases, function() {\n\n                        // Check edition capabilities\n                        var canCreate = false;\n                        var canEdit = false;\n                        var canDelete = false;\n                        if( 'editionLayers' in config && chName in config.editionLayers ) {\n                            var al = config.editionLayers[chName];\n                            if( al.capabilities.createFeature == \"True\" )\n                                canCreate = true;\n                            if( al.capabilities.modifyAttribute == \"True\" || al.capabilities.modifyGeometry == \"True\" )\n                                canEdit = true;\n                            if( al.capabilities.deleteFeature == \"True\" )\n                                canDelete = true;\n                        }\n\n                        // Unbind previous events on page\n                        $( childTable ).on( 'page.dt', function() {\n                            // unbind previous events\n                            $(childTable +' tr').unbind('click');\n                            $(childTable +' tr td button').unbind('click');\n                        });\n\n                        // Bind events when drawing table\n                        $( childTable ).on( 'draw.dt', function() {\n\n                            $(childTable +' tr').unbind('click');\n                            $(childTable +' tr td button').unbind('click');\n\n                            // Bind event on select button\n                            bindTableSelectButton(chName, childTable);\n\n                            // Bind event on delete button\n                            if( canDelete ) {\n                                bindTableDeleteButton(chName, childTable);\n                            }\n\n                            // Bind event on edit button\n                            if( canEdit ) {\n                                bindEditTableEditButton(chName, childTable);\n                            }\n\n                            // Remove button before reuse it\n                            // Zoom\n                            $(childTable +' tr td button.attribute-layer-feature-focus').remove();\n                            // Unlink\n                            $(childTable +' tr td button.attribute-layer-feature-unlink').remove();\n                            // Hide columns\n                            var dt = $(childTable).DataTable();\n                            for ( c = 2; c < 7; c++ ) {\n                                var dataSrc = dt.column(c).dataSrc();\n                                if ( dataSrc == 'unlink' ||\n                                     dataSrc == 'zoom' ||\n                                     dataSrc == 'center' )\n                                     dt.column(c).visible(false);\n                                if ( dataSrc == 'edit' && canCreate ) {\n                                    var createHeader = $(dt.column(c).header());\n                                    if ( createHeader.find('button.attribute-layer-feature-create').length == 0 ) {\n                                        createHeader\n                                            .append('<button class=\"btn btn-mini attribute-layer-feature-create\" value=\"-1\" title=\"'+lizDict['attributeLayers.toolbar.btn.data.createFeature.title']+'\"><i class=\"icon-plus\"></i></button>')\n                                            .css('padding', '10px 5px');\n                                        createHeader\n                                            .children('button.attribute-layer-feature-create')\n                                            .click(function(){\n                                var tabPane = $(this).parents('div.tab-pane.attribute-layer-child-content');\n                                var parentFeatId = tabPane.find('input.attribute-table-hidden-parent-feature-id').val();\n                                var parentLayerName = tabPane.find('input.attribute-table-hidden-parent-layer').val();\n                                var layerName = tabPane.find('input.attribute-table-hidden-layer').val();\n                                lizMap.getLayerFeature(parentLayerName, parentFeatId, function(parentFeat) {\n                                    var parentLayerId = config.layers[lizMap.getLayerNameByCleanName(parentLayerName)]['id'];\n                                    var lid = config.layers[lizMap.getLayerNameByCleanName(layerName)]['id'];\n                                    lizMap.launchEdition( lid, null, {layerId:parentLayerId,feature:parentFeat});\n                                });\n                                return false;\n                                            });\n                                    }\n                                }\n                            }\n\n                            // Display the first child table displayed\n                            if ( $(childTable).parents('.edition-children-content').children('ul.nav-tabs').children('li.active').length == 0 ) {\n                                var tabId = $(childTable).parents('.tab-pane.attribute-layer-child-content').attr('id');\n                                $(childTable).parents('.edition-children-content').find('ul.nav-tabs > li > a[href=\"#'+tabId+'\"]').click();\n                            }\n                            return false;\n\n                        });\n                    });\n                });\n            }\n\n\n            function getAttributeFeatureData(aName, aFilter, aFeatureID, aGeometryName, aCallBack){\n\n              aFilter = typeof aFilter !== 'undefined' ?  aFilter : null;\n              aFeatureID = typeof aFeatureID !== 'undefined' ?  aFeatureID : null;\n              aGeometryName  = typeof aGeometryName !== 'undefined' ?  aGeometryName : 'extent';\n              aCallBack = typeof aCallBack !== 'undefined' ?  aCallBack : null;\n\n              // get layer configs\n              if ( !(aName in config.layers) ) {\n                  var qgisName = lizMap.getNameByCleanName(aName);\n                  if ( qgisName && (qgisName in config.layers)) {\n                      aName = qgisName;\n                  } else {\n                      console.log('getAttributeFeatureData: \"'+aName+'\" and \"'+qgisName+'\" not found in config');\n                      return false;\n                  }\n              }\n              var aConfig = config.layers[aName];\n              var atConfig = null;\n              if( aName in config.attributeLayers )\n                  atConfig = config.attributeLayers[aName];\n\n              var limitDataToBbox = false;\n              if ( 'limitDataToBbox' in config.options && config.options.limitDataToBbox == 'True'){\n                  limitDataToBbox = true;\n              }\n              lizMap.getFeatureData(aName, aFilter, aFeatureID, aGeometryName, limitDataToBbox, null, null, aCallBack);\n              return true;\n            }\n\n            function refreshLayerSelection( featureType, featId, rupdateDrawing ) {\n                // Set function parameters if not given\n                rupdateDrawing = typeof rupdateDrawing !== 'undefined' ?  rupdateDrawing : null;\n\n                // Assure selectedFeatures property exists for the layer\n                if( !config.layers[featureType]['selectedFeatures'] )\n                    config.layers[featureType]['selectedFeatures'] = [];\n\n                // Add or remove feature id from the selectedFeatures\n                if( $.inArray( featId, config.layers[featureType]['selectedFeatures'] ) == -1 ) {\n                    config.layers[featureType]['selectedFeatures'].push( featId );\n                }else{\n                    var idx = $.inArray( featId, config.layers[featureType]['selectedFeatures'] );\n                    config.layers[featureType]['selectedFeatures'].splice( idx, 1 );\n                }\n\n                lizMap.events.triggerEvent(\"layerSelectionChanged\",\n                    {\n                        'featureType': featureType,\n                        'featureIds': config.layers[featureType]['selectedFeatures'],\n                        'updateDrawing': rupdateDrawing\n                    }\n                );\n\n            }\n\n            function setSelectedFeaturesFromSearchedFilter( featureType, supdateDrawing ) {\n                // Set function parameters if not given\n                supdateDrawing = typeof supdateDrawing !== 'undefined' ?  supdateDrawing : true;\n\n                // Assure selectedFeatures property exists for the layer\n                if( !config.layers[featureType]['selectedFeatures'] )\n                    config.layers[featureType]['selectedFeatures'] = [];\n\n                var hasChanged = false;\n                // Add filtered featured\n                $('.attribute-table-table[id]').each(function(){\n                    var tableId = $(this).attr('id');\n                    var tableLayerName = $(this).parents('div.dataTables_wrapper:first').prev('input.attribute-table-hidden-layer').val()\n                    // Get parent table for the feature type\n                    if ( tableLayerName\n                        && $.fn.dataTable.isDataTable( $(this) )\n                        && lizMap.cleanName( featureType ) == tableLayerName\n                    ){\n\n                        var sIds = [];\n                        var rTable = $(this).DataTable();\n                        var filteredrowids = rTable.rows( {\"filter\":\"applied\"} ).ids();\n                        for ( var i = 0; i < filteredrowids.length; i++ ) {\n                            sIds.push( filteredrowids[i] );\n                        }\n                        config.layers[featureType]['selectedFeatures'] = sIds;\n                        hasChanged = true;\n                    }\n                })\n\n                if( hasChanged ){\n                    lizMap.events.triggerEvent(\"layerSelectionChanged\",\n                        {\n                            'featureType': featureType,\n                            'featureIds': config.layers[featureType]['selectedFeatures'],\n                            'updateDrawing': supdateDrawing\n                        }\n                    );\n                }\n\n            }\n\n            function emptyLayerSelection( featureType, arefresh ) {\n                // Set function parameters if not given\n                arefresh = typeof arefresh !== 'undefined' ?  arefresh : true;\n\n                // Empty array\n                config.layers[featureType]['selectedFeatures'] = [];\n\n                lizMap.events.triggerEvent(\"layerSelectionChanged\",\n                    {\n                        'featureType': featureType,\n                        'featureIds': config.layers[featureType]['selectedFeatures'],\n                        'updateDrawing': arefresh\n                    }\n                );\n\n            }\n\n            function refreshLayerFilter( featureType, featId ) {\n                // Assure filteredFeatures property exists for the layer\n                if( !config.layers[featureType]['filteredFeatures'] )\n                    config.layers[featureType]['filteredFeatures'] = [];\n\n                // Add or remove feature id from the filteredFeatures\n                if( $.inArray( featId, config.layers[featureType]['filteredFeatures'] ) == -1 ) {\n                    config.layers[featureType]['filteredFeatures'].push( featId );\n                }else{\n                    var idx = $.inArray( featId, config.layers[featureType]['filteredFeatures'] );\n                    config.layers[featureType]['filteredFeatures'].splice( idx, 1 );\n                }\n\n                lizMap.events.triggerEvent(\"layerFilteredFeaturesChanged\",\n                    {\n                        'featureType': featureType,\n                        'featureIds': config.layers[featureType]['filteredFeatures'],\n                        'updateDrawing': true\n                    }\n                );\n\n\n            }\n\n            function emptyLayerFilter( featureType ) {\n                // Empty array\n                config.layers[featureType]['filteredFeatures'] = [];\n\n                lizMap.lizmapLayerFilterActive = null;\n\n                // Empty layer filter\n                var layer = lizMap.map.getLayersByName( lizMap.cleanName(featureType) )[0];\n                if( layer ) {\n                    delete layer.params['FILTER'];\n                }\n                config.layers[featureType]['request_params']['filter'] = null;\n                config.layers[featureType]['request_params']['exp_filter'] = null;\n\n                lizMap.events.triggerEvent(\"layerFilteredFeaturesChanged\",\n                    {\n                        'featureType': featureType,\n                        'featureIds': config.layers[featureType]['filteredFeatures'],\n                        'updateDrawing': true\n                    }\n                );\n            }\n\n            function filterLayerFromSelectedFeatures( featureType ) {\n\n                if( !config.attributeLayers[featureType] )\n                    return false;\n                // Assure selectedFeatures property exists for the layer\n                if( !config.layers[featureType]['selectedFeatures'] )\n                    config.layers[featureType]['selectedFeatures'] = [];\n\n                // Copy selected features as filtered features\n                config.layers[featureType]['filteredFeatures'] = config.layers[featureType]['selectedFeatures'].slice();\n\n                // Remove selection\n                emptyLayerSelection( featureType, false );\n\n                lizMap.lizmapLayerFilterActive = featureType;\n\n                lizMap.events.triggerEvent(\"layerFilteredFeaturesChanged\",\n                    {\n                        'featureType': featureType,\n                        'featureIds': config.layers[featureType]['filteredFeatures'],\n                        'updateDrawing': true\n                    }\n                );\n            }\n\n        function updateLayer( typeNamePile, typeNameFilter, typeNameDone,  cascade ){\n            if (typeNamePile.length == 0) {\n                return;\n            }\n            cascade = typeof cascade !== 'undefined' ?  cascade : true;\n\n            // Get first elements of the pile and withdraw it from the pile\n            var typeName = typeNamePile.shift();\n            var cleanName = lizMap.cleanName(typeName);\n\n            // Get corresponding filter\n            var aFilter = typeNameFilter[typeName];\n\n            // Apply filter and get children\n            if (aFilter) {\n                applyLayerFilter( typeName, aFilter, typeNamePile, typeNameFilter, typeNameDone, cascade );\n            } else {\n                applyEmptyLayerFilter( typeName, typeNamePile, typeNameFilter, typeNameDone, cascade );\n            }\n\n            // Change background in switcher\n            var trFilteredBgcolor = 'inherit';\n            var displayUnFilterSwitcherTool = false;\n            if( aFilter ){\n                trFilteredBgcolor = 'rgba(255, 171, 0, 0.4)';\n                displayUnFilterSwitcherTool = true;\n            }\n            $('#switcher .treeTable tr#group-' + cleanName).css('background-color', trFilteredBgcolor );\n            $('#switcher .treeTable tr#layer-' + cleanName).css('background-color', trFilteredBgcolor );\n            $('#layerActionUnfilter' ).toggle( ( lizMap.lizmapLayerFilterActive !== null ) ).css( 'background-color', 'rgba(255, 171, 0, 0.4)');\n\n        }\n\n        function buildChildParam( relation, typeNameDone ) {\n            var childLayerConfigA = lizMap.getLayerConfigById(\n                relation.referencingLayer,\n                config.attributeLayers,\n                'layerId'\n            );\n\n            // if no config\n            if( !childLayerConfigA ) {\n                return null;\n            }\n\n            var childLayerKeyName = childLayerConfigA[0];\n            var childLayerConfig = childLayerConfigA[1];\n\n            // Avoid typeName already done ( infinite loop )\n            if( $.inArray( childLayerKeyName, typeNameDone ) != -1 )\n                return null;\n\n            // Check if it is a pivot table\n            var relationIsPivot = false;\n            if( 'pivot' in childLayerConfig\n                && childLayerConfig.pivot == 'True'\n                && childLayerConfig.layerId in config.relations.pivot\n            ){\n                relationIsPivot = true;\n            }\n            // Build parameter for this child\n            var fParam = {\n                'filter': null,\n                'fieldToFilter': relation.referencingField,\n                'parentField': relation.referencedField,\n                'parentValues': [],\n                'pivot': relationIsPivot,\n                'otherParentTypeName': null,\n                'otherParentRelation': null,\n                'otherParentValues': []\n            };\n\n            return [childLayerKeyName, fParam];\n        }\n\n        function getPivotParam( typeNameId, attributeLayerConfig, typeNameDone ) {\n            var isPivot = false;\n            var pivotParam = null;\n            if( 'pivot' in attributeLayerConfig\n                && attributeLayerConfig.pivot == 'True'\n                && attributeLayerConfig.layerId in config.relations.pivot\n            ){\n                isPivot = true;\n            }\n\n            if (!isPivot) {\n                return pivotParam;\n            }\n\n            var otherParentId = null;\n            var otherParentRelation = null;\n            var otherParentTypeName = null;\n\n            for( var rx in config.relations ){\n                // Do not take pivot object into account\n                if( rx == 'pivot' )\n                    continue;\n                // Do not get relation for parent layer (we are looking for other parents only)\n                if( rx == typeNameId)\n                    continue;\n                // Do not get relation for parent to avoid ( infinite loop otherwise )\n                var otherParentConfig = lizMap.getLayerConfigById(\n                    rx,\n                    config.attributeLayers,\n                    'layerId'\n                );\n                if( otherParentConfig\n                    && $.inArray( otherParentConfig[0], typeNameDone ) != -1\n                )\n                    continue;\n\n                var aLayerRelations = config.relations[rx];\n\n                for( var xx in aLayerRelations){\n                    // Only look at relations concerning typeName\n                    if( aLayerRelations[xx].referencingLayer != attributeLayerConfig.layerId)\n                        continue;\n\n                    otherParentId = rx;\n                    otherParentRelation = aLayerRelations[xx];\n\n                    var otherParentConfig = lizMap.getLayerConfigById(\n                        rx,\n                        config.attributeLayers,\n                        'layerId'\n                    );\n                    otherParentTypeName =  otherParentConfig[0];\n                }\n            }\n\n            if( otherParentId && otherParentRelation){\n                pivotParam = {};\n                pivotParam['otherParentTypeName'] = otherParentTypeName;\n                pivotParam['otherParentRelation'] = otherParentRelation;\n                pivotParam['otherParentValues'] = [];\n            }\n\n            return pivotParam;\n        }\n\n        function applyEmptyLayerFilter( typeName, typeNamePile, typeNameFilter, typeNameDone, cascade ){\n            // Add done typeName to the list\n            typeNameDone.push( typeName );\n\n            // **0** Prepare some variable. e.g. reset features stored in the layer config\n            var layerConfig = config.layers[typeName];\n            layerConfig['features'] = {};\n\n            // **1** Get children info\n            var typeNameId = layerConfig['id'];\n            var typeNameChildren = {};\n\n            var getAttributeLayerConfig = lizMap.getLayerConfigById(\n                typeNameId,\n                config.attributeLayers,\n                'layerId'\n            );\n            var attributeLayerConfig = null;\n            if( getAttributeLayerConfig ) {\n                attributeLayerConfig = getAttributeLayerConfig[1];\n            }\n\n            if( 'relations' in config\n                && typeNameId in config.relations\n                && cascade\n            ) {\n                // Loop through relations to get children data\n                var layerRelations = config.relations[typeNameId];\n                for( var lid in layerRelations ) {\n                    var relation = layerRelations[lid];\n                    var childParam = buildChildParam(relation, typeNameDone);\n\n                    // if no child param\n                    if( !childParam )\n                        continue;\n\n                    typeNameChildren[ childParam[0] ] = childParam[1];\n                }\n            }\n\n            // ** ** If typeName is a pivot, add some info about the otherParent\n            // If pivot, re-loop relations to find configuration for other parents (go up)\n            var pivotParam = getPivotParam( typeNameId, attributeLayerConfig, attributeLayerConfig, typeNameDone );\n\n            // **3** Apply filter to the typeName and redraw if necessary\n            var layer = lizMap.map.getLayersByName( lizMap.cleanName(typeName) )[0];\n            layerConfig['request_params']['filter'] = null;\n            layerConfig['request_params']['exp_filter'] = null;\n            layerConfig['request_params']['filtertoken'] = null;\n\n            if( layer ) {\n                delete layer.params['FILTER'];\n                delete layer.params['FILTERTOKEN'];\n            }\n\n            // Redraw openlayers layer\n            if( layer\n                && layerConfig['geometryType'] != 'none'\n                && layerConfig['geometryType'] != 'unknown'\n            ){\n                layer.redraw(true);\n            }\n\n            // Refresh attributeTable\n            var opTable = '#attribute-layer-table-'+lizMap.cleanName( typeName );\n            if( $( opTable ).length ){\n                getDataAndRefreshAttributeTable(typeName, null, opTable);\n            }\n\n            // And send event so that getFeatureInfo and getPrint use the updated layer filters\n            lizMap.events.triggerEvent(\"layerFilterParamChanged\",\n                {\n                    'featureType': typeName,\n                    'filter': null,\n                    'updateDrawing': true\n                }\n            );\n\n            // **4** build children filters\n            if( cascade ) {\n                for( var x in typeNameChildren ){\n                    typeNameFilter[x] = null;\n                    typeNamePile.push( x );\n                }\n            }\n\n            // **5** Add other parent to pile when typeName is a pivot\n            if( pivotParam ){\n                // Add a Filter to the \"other parent\" layers\n                config.layers[ pivotParam['otherParentTypeName'] ]['request_params']['filter'] = null;\n\n                typeNameFilter[ pivotParam['otherParentTypeName'] ] = null;\n                typeNamePile.push( pivotParam['otherParentTypeName'] );\n            }\n\n            // **6** Launch the method again if typeName is not empty\n            if( typeNamePile.length > 0 ) {\n                updateLayer( typeNamePile, typeNameFilter, typeNameDone, cascade );\n            }\n\n        }\n\n        function applyLayerFilter( typeName, aFilter, typeNamePile, typeNameFilter, typeNameDone, cascade ){\n            if (!aFilter) {\n                applyEmptyLayerFilter( typeName, typeNamePile, typeNameFilter, typeNameDone, cascade );\n                return;\n            }\n\n            // Add done typeName to the list\n            typeNameDone.push( typeName );\n\n            // Get features to refresh attribute table AND build children filters\n            var geometryName = 'extent';\n            lizMap.getFeatureData(typeName, aFilter, null, geometryName, false, null, null,\n                function(aName, aNameFilter, aNameFeatures, aNameAliases ){\n\n                // **0** Prepare some variable. e.g. reset features stored in the layer config\n                var layerConfig = config.layers[typeName];\n                layerConfig['features'] = {};\n                var foundFeatures = {};\n\n                // **1** Get children info\n                var cFeatures = aNameFeatures;\n                var typeNameId = layerConfig['id'];\n                var typeNamePkey = config.attributeLayers[typeName]['primaryKey'];\n                var typeNamePkeyValues = [];\n                var typeNameChildren = {};\n\n                var getAttributeLayerConfig = lizMap.getLayerConfigById(\n                    typeNameId,\n                    config.attributeLayers,\n                    'layerId'\n                );\n                var attributeLayerConfig = null;\n                if( getAttributeLayerConfig )\n                    attributeLayerConfig = getAttributeLayerConfig[1];\n\n                if( 'relations' in config\n                    && typeNameId in config.relations\n                    && cascade\n                ) {\n                    // Loop through relations to get children data\n                    var layerRelations = config.relations[typeNameId];\n                    for( var lid in layerRelations ) {\n\n                        var relation = layerRelations[lid];\n                        var childParam = buildChildParam(relation, typeNameDone);\n\n                        // if no child param\n                        if( !childParam )\n                            continue;\n\n                        typeNameChildren[ childParam[0] ] = childParam[1];\n\n                    }\n                }\n\n                // ** ** If typeName is a pivot, add some info about the otherParent\n                // If pivot, re-loop relations to find configuration for other parents (go up)\n                var pivotParam = getPivotParam( typeNameId, attributeLayerConfig, typeNameDone );\n\n                // **2** Loop through features && get children filter values\n                var filteredFeatures = [];\n\n                cFeatures.forEach(function(feat) {\n\n                    // Add feature to layer config data\n                    var fid = feat.id.split('.')[1];\n                    foundFeatures[fid] = feat;\n\n                    // Add primary keys values to build the WMS filter ( to be able to redraw layer)\n                    var pk = feat.properties[typeNamePkey];\n                    if( ('types' in layerConfig)\n                     && (typeNamePkey in layerConfig.types)\n                     && layerConfig.types[typeNamePkey] == 'string') {\n                        pk = \" '\" + pk + \"' \";\n                    } else {\n                        var intRegex = /^[0-9]+$/;\n                        if( !( intRegex.test(pk) ) )\n                            pk = \" '\" + pk + \"' \";\n                    }\n                    typeNamePkeyValues.push( pk );\n\n                    // Reset filteredFeatures with found features\n                    filteredFeatures.push( fid );\n\n                    // Loop through found children to build filter\n                    // Only if aFilter (original typeName filter) is not null\n                    if( cascade && aFilter ){\n                        for( var x in typeNameChildren ){\n                            // Get the parent values to be able to build the filter\n                            var cData = typeNameChildren[x];\n                            typeNameChildren[x]['parentValues'].push( \"'\" + feat.properties[ cData['parentField'] ] + \"'\" );\n                        }\n                    }\n\n                    // If pivot, we need also to get the values to filter the other parent\n                    if( pivotParam && aFilter ){\n                        var referencingField = pivotParam['otherParentRelation'].referencingField;\n                        pivotParam['otherParentValues'].push( \"'\" + feat.properties[ referencingField ] + \"'\" );\n                    }\n                });\n\n                // **3** Apply filter to the typeName and redraw if necessary\n                layerConfig['features'] = foundFeatures;\n                layerConfig['alias'] = aNameAliases;\n                var layerN = attributeLayersDic[lizMap.cleanName(typeName)];\n\n                var lFilter = null;\n                var layer = lizMap.map.getLayersByName( lizMap.cleanName(typeName) )[0];\n                if( layer && layer.params) {\n                    layerN = layer.params['LAYERS'];\n                }\n\n                // Add false value to hide all features if we need to hide layer\n                if( typeNamePkeyValues.length == 0 )\n                    typeNamePkeyValues.push('-99999');\n\n                if( aFilter ){\n                    lFilter = layerN + ':\"' + typeNamePkey + '\" IN ( ' + typeNamePkeyValues.join( ' , ' ) + ' ) ';\n\n                    // Try to use the simple filter ( for example myforeignkey = 4 )\n                    // instead of the full list of pkeys we got from wfs\n                    // This can prevent too long GET URL\n                    // NB : we should improve this by using server side filters\n                    if( !aFilter.startsWith('$id') ){\n                        var simpleFilter = aFilter;\n                        if( !aFilter.startsWith(layerN) ){\n                            simpleFilter = layerN + ':' + aFilter ;\n                        }\n                        lFilter = simpleFilter;\n                    }\n                }\n\n                layerConfig['request_params']['filter'] = lFilter;\n                layerConfig['request_params']['exp_filter'] = aFilter;\n\n                // Add filter to openlayers layer\n                if( layer\n                    && layer.params\n                ){\n                    if( aFilter ){\n                        // Get filter token\n                        var surl = OpenLayers.Util.urlAppend(lizUrls.wms\n                            ,OpenLayers.Util.getParameterString(lizUrls.params)\n                        );\n                        var sdata = {\n                            service: 'WMS',\n                            request: 'GETFILTERTOKEN',\n                            typename: typeName,\n                            filter: lFilter\n                        };\n                        $.post(surl, sdata, function(result){\n                            layer.params['FILTERTOKEN'] = result.token;\n                            delete layer.params['FILTER'];\n                            layerConfig['request_params']['filtertoken'] = result.token;\n                            // Redraw openlayers layer\n                            if( layerConfig['geometryType']\n                                && layerConfig.geometryType != 'none'\n                                && layerConfig.geometryType != 'unknown'\n                            ){\n                                layer.redraw(true);\n                            }\n                        });\n\n                    }\n                    else{\n                        delete layer.params['FILTER'];\n                        delete layer.params['FILTERTOKEN'];\n                        layerConfig['request_params']['filtertoken'] = null;\n                    }\n                }\n\n                // Redraw openlayers layer\n                if( layer\n                    && layerConfig['geometryType'] != 'none'\n                    && layerConfig['geometryType'] != 'unknown'\n                ){\n                    layer.redraw(true);\n                }\n\n                // Refresh attributeTable\n                var opTable = '#attribute-layer-table-'+lizMap.cleanName( typeName );\n                if( $( opTable ).length ){\n                    refreshLayerAttributeDatatable(typeName, opTable, cFeatures);\n                }\n\n                // And send event so that getFeatureInfo and getPrint use the updated layer filters\n                lizMap.events.triggerEvent(\"layerFilterParamChanged\",\n                    {\n                        'featureType': typeName,\n                        'filter': lFilter,\n                        'updateDrawing': true\n                    }\n                );\n\n                // **4** build children filters\n                if( cascade ) {\n                    for( var x in typeNameChildren ){\n                        var cName = x;\n                        var cData = typeNameChildren[x];\n                        var cFilter = null;\n                        var wmsCname = cName;\n                        // Get WMS layer name (can be different depending on QGIS Server version)\n                        var wlayer = lizMap.map.getLayersByName( lizMap.cleanName(cName) )[0];\n                        if( wlayer && wlayer.params) {\n                            wmsCname = wlayer.params['LAYERS'];\n                        }\n\n                        // Build filter for children\n                        // and add child to the typeNameFilter and typeNamePile objects\n                        // only if typeName filter aFilter was originally set\n                        if( aFilter && cData['parentValues'].length > 0 && cascade != 'removeChildrenFilter' )\n                            cFilter = wmsCname + ':\"' + cData['fieldToFilter'] + '\" IN ( ' + cData['parentValues'].join() + ' )';\n                        else if( aFilter && cascade != 'removeChildrenFilter' )\n                            cFilter = wmsCname + ':\"' + cData['fieldToFilter'] + '\" IN ( -99999 )';\n\n                        config.layers[cName]['request_params']['filter'] = cFilter;\n\n                        typeNameFilter[x] = cFilter;\n                        typeNamePile.push( x );\n\n                    }\n                }\n\n                // **5** Add other parent to pile when typeName is a pivot\n                if( pivotParam ){\n                    // Add a Filter to the \"other parent\" layers\n                    var cFilter = null;\n                    var orObj = null;\n                    var pwmsName = pivotParam['otherParentTypeName'];\n                    // Get WMS layer name\n                    var pwlayer = lizMap.map.getLayersByName( lizMap.cleanName(pwmsName) )[0];\n                    if( pwlayer && pwlayer.params) {\n                        pwmsName = pwlayer.params['LAYERS'];\n                    }\n                    if( aFilter  ){\n                        if( pivotParam['otherParentValues'].length > 0 ){\n                            cFilter = pwmsName + ':\"';\n                            cFilter+= pivotParam['otherParentRelation'].referencedField;\n                            cFilter+= '\" IN ( ' + pivotParam['otherParentValues'].join() + ' )';\n                            orObj = {\n                                field: pivotParam['otherParentRelation'].referencedField,\n                                values: pivotParam['otherParentValues']\n                            }\n                        }\n                        else {\n                            cFilter = pwmsName + ':\"' + pivotParam['otherParentRelation'].referencedField + '\" IN ( ' + \"'-999999'\" + ' )';\n                            orObj = {\n                                field: pivotParam['otherParentRelation'].referencedField,\n                                values: ['-999999']\n                            }\n                        }\n                    }\n\n                    config.layers[ pivotParam['otherParentTypeName'] ]['request_params']['filter'] = cFilter;\n\n                    typeNameFilter[ pivotParam['otherParentTypeName'] ] = cFilter;\n                    typeNamePile.push( pivotParam['otherParentTypeName'] );\n                }\n\n                // **6** Launch the method again if typeName is not empty\n                if( typeNamePile.length > 0 ) {\n                    updateLayer( typeNamePile, typeNameFilter, typeNameDone, cascade );\n                }\n            });\n        }\n\n            function deleteEditionFeature( layerId, featureId ){\n                var eConfig = lizMap.getLayerConfigById(\n                    layerId,\n                    config.editionLayers,\n                    'layerId'\n                );\n                var deleteConfirm = '';\n                if( eConfig )\n                    deleteConfirm += config.layers[eConfig[0]].title;\n                if( config.layers[eConfig[0]]\n                    && config.layers[eConfig[0]]['features']\n                    && config.layers[eConfig[0]]['features'][featureId]\n                ){\n                    var eProp = config.layers[eConfig[0]]['features'][featureId].properties;\n                    for( var y in eProp ){\n                        deleteConfirm+= '  \\n\"' + y + '\": ' + eProp[y] ;\n                    }\n\n                }\n                lizMap.deleteEditionFeature( layerId, featureId, deleteConfirm, function( aLID, aFID ){\n                    // Check if the map and tables must be refreshed after this deletion\n                    var featureType = eConfig[0];\n                    var cascadeToChildren = $('#jforms_view_attribute_layers_option_cascade_label input[name=\"cascade\"]').prop('checked');\n                    // Get filter status for the layer concerned by the edition\n                    var hasFilter = false;\n                    if(\n                        ('filteredFeatures' in config.layers[featureType] && config.layers[featureType]['filteredFeatures'].length > 0 )\n                        || ( 'request_params' in config.layers[featureType] && config.layers[featureType]['request_params']['filter'] )\n                        || ( 'request_params' in config.layers[featureType] && config.layers[featureType]['request_params']['exp_filter'] )\n                    ){\n                       hasFilter = true;\n                    }\n                    if( hasFilter && lizMap.lizmapLayerFilterActive && cascadeToChildren ){\n                        var parentFeatureType = lizMap.lizmapLayerFilterActive;\n                        updateMapLayerDrawing( parentFeatureType, cascadeToChildren );\n                    }\n\n                });\n            }\n\n\n            function updateMapLayerDrawing( featureType, cascade ){\n                cascade = typeof cascade !== 'undefined' ?  cascade : true;\n                // Get layer\n                var layer = lizMap.map.getLayersByName( lizMap.cleanName(featureType) )[0];\n\n                // Build filter from filteredFeatures\n                var cFilter = null;\n                if ( config.layers[featureType]['filteredFeatures']\n                    && config.layers[featureType]['filteredFeatures'].length > 0\n                ){\n                    cFilter = '$id IN ( ' + config.layers[featureType]['filteredFeatures'].join() + ' ) ';\n                }\n\n                // Build selection parameter from selectedFeatures\n                var layerN = attributeLayersDic[featureType];\n                if( config.layers[featureType]\n                    && config.layers[featureType]['selectedFeatures']\n                    && config.layers[featureType]['selectedFeatures'].length\n                ) {\n                    config.layers[featureType]['request_params']['selection'] = layerN + ':' + config.layers[featureType]['selectedFeatures'].join();\n\n                    // Get selection token\n                    var surl = OpenLayers.Util.urlAppend(lizUrls.wms\n                        ,OpenLayers.Util.getParameterString(lizUrls.params)\n                    );\n                    var sdata = {\n                        service: 'WMS',\n                        request: 'GETSELECTIONTOKEN',\n                        typename: featureType,\n                        ids: config.layers[featureType]['selectedFeatures'].join()\n                    };\n                    $.post(surl, sdata, function(result){\n                        config.layers[featureType]['request_params']['selectiontoken'] = result.token;\n                        if ( layer ) {\n                            //layer.params['SELECTION'] = layerN + ':' + config.layers[featureType]['selectedFeatures'].join();\n                            layer.params['SELECTIONTOKEN'] = result.token;\n                        }\n                    });\n                }\n                else {\n                    if ( layer ){\n                        //delete layer.params['SELECTION'];\n                        delete layer.params['SELECTIONTOKEN'];\n                    }\n                    config.layers[featureType]['request_params']['selection'] = null;\n                    config.layers[featureType]['request_params']['selectiontoken'] = null;\n                }\n\n                // Build data to update layer drawing and other components\n                var typeNamePile = [ featureType ];\n                var typeNameFilter = {};\n                typeNameFilter[featureType] = cFilter;\n                var typeNameDone = [];\n                updateLayer(typeNamePile, typeNameFilter, typeNameDone,  cascade );\n\n            }\n\n            function updateMapLayerSelection( featureType ) {\n\n                // Get layer\n                var cleanName = lizMap.cleanName(featureType);\n                var layer = lizMap.map.getLayersByName( cleanName )[0];\n                if( !layer )\n                    return;\n\n                var lConfig = config.layers[featureType];\n                if( !lConfig )\n                    return;\n\n                // Build selection parameter from selectedFeatures\n                if( lConfig.selectedFeatures\n                    && lConfig.selectedFeatures.length\n                ) {\n                    if ( !( 'request_params' in lConfig ) )\n                        lConfig['request_params'] = {};\n                    lConfig.request_params['selection'] = featureType + ':' + lConfig.selectedFeatures.join();\n\n                    // Get selection token\n                    var surl = OpenLayers.Util.urlAppend(lizUrls.wms\n                        ,OpenLayers.Util.getParameterString(lizUrls.params)\n                    );\n                    var sdata = {\n                        service: 'WMS',\n                        request: 'GETSELECTIONTOKEN',\n                        typename: featureType,\n                        ids: lConfig.selectedFeatures.join()\n                    };\n                    $.post(surl, sdata, function(result){\n                        lConfig.request_params['selectiontoken'] = result.token;\n                        if ( layer )\n                            layer.params['SELECTIONTOKEN'] = result.token;\n                        // Redraw openlayers layer\n                        if( lConfig['geometryType']\n                            && lConfig.geometryType != 'none'\n                            && lConfig.geometryType != 'unknown'\n                        ){\n                            layer.redraw(true);\n                        }\n                    });\n                }\n                else {\n                    //delete layer.params['SELECTION'];\n                    if ( layer )\n                        delete layer.params['SELECTIONTOKEN'];\n                    if ( !( 'request_params' in lConfig ) )\n                        lConfig['request_params'] = {};\n                    lConfig.request_params['selection'] = null;\n                    lConfig.request_params['selectiontoken'] = null;\n                    // Redraw openlayers layer\n                    if( lConfig['geometryType']\n                        && lConfig.geometryType != 'none'\n                        && lConfig.geometryType != 'unknown'\n                    ){\n                        layer.redraw(true);\n                    }\n                }\n            }\n\n            function updateAttributeTableTools( featureType ){\n\n                // Show unselect and filter buttons if some features are selected\n                var selIds = config.layers[featureType]['selectedFeatures'];\n                var filIds = config.layers[featureType]['filteredFeatures'];\n                var cleanName = lizMap.cleanName(featureType);\n                // UnSelection button and move selection to top\n                if( selIds && selIds.length > 0 ){\n                    $('button.btn-unselect-attributeTable[value=\"'+cleanName+'\"]').removeClass('hidden');\n                    $('button.btn-moveselectedtotop-attributeTable[value=\"'+cleanName+'\"]').removeClass('hidden');\n                }\n                else{\n                    $('button.btn-unselect-attributeTable[value=\"'+cleanName+'\"]').addClass('hidden');\n                    $('button.btn-moveselectedtotop-attributeTable[value=\"'+cleanName+'\"]').addClass('hidden');\n                }\n\n                // Filter button\n\n                // Hide it first and remove active classes\n                $('button.btn-filter-attributeTable[value=\"'+cleanName+'\"]').addClass('hidden').removeClass('active btn-warning');\n\n                // Then display it only if:\n                // * no other features is active and selected items exists for this layer\n                // * or this is the layer for which it is active\n                if( ( !lizMap.lizmapLayerFilterActive && selIds && selIds.length > 0)\n                    || lizMap.lizmapLayerFilterActive == featureType\n                 ){\n                    $('button.btn-filter-attributeTable[value=\"'+cleanName+'\"]').removeClass('hidden');\n\n                    // Show button as activated if some filter exists\n                    if( filIds && filIds.length > 0 )\n                        $('button.btn-filter-attributeTable[value=\"'+cleanName+'\"]').addClass('active btn-warning');\n                }\n\n            }\n\n            function redrawAttributeTableContent( featureType, featureIds ){\n                // Loop through all datatables to get the one concerning this featureType\n                $('.attribute-table-table[id]').each(function(){\n                    var tableId = $(this).attr('id');\n                    var tableLayerName = $(this).parents('div.dataTables_wrapper:first').prev('input.attribute-table-hidden-layer').val()\n\n                    if ( tableLayerName\n                        && $.fn.dataTable.isDataTable( $(this) )\n                        && lizMap.cleanName( featureType ) == tableLayerName\n                    ){\n                        // Get selected feature ids if not given\n                        if( !featureIds ){\n                            // Assure selectedFeatures property exists for the layer\n                            if( !config.layers[featureType]['selectedFeatures'] )\n                                config.layers[featureType]['selectedFeatures'] = [];\n                            var featureIds = config.layers[featureType]['selectedFeatures'];\n                        }\n\n                        // Get Datatable api\n                        var rTable = $(this).DataTable();\n                        var dTable = $(this).dataTable();\n\n                        // Remove class selected for all the lines\n                        rTable\n                        .rows( $(this).find('tr.selected') )\n                        .every(function(){\n                            dTable.fnUpdate( 'z', this, 0, false, false );\n                        })\n                        //~ .draw()\n                        .nodes()\n                        .to$()\n                        .removeClass( 'selected' )\n                        ;\n\n                        // Add class selected from featureIds\n                        // And change lizSelected column value to a\n                        if( featureIds.length > 0 ){\n\n                            var rTable = $(this).DataTable();\n                            rTable.data().each( function(d){\n                                if( $.inArray( d.DT_RowId.toString(), featureIds ) != -1 )\n                                    d.lizSelected = 'a';\n                            });\n                            rTable\n                            .rows( function ( idx, data, node ) {\n                                return data.lizSelected == 'a' ? true : false;\n                            })\n                            .nodes()\n                            .to$()\n                            .addClass( 'selected' )\n                            ;\n                        }\n                    }\n\n                });\n            }\n\n            function refreshTablesAfterEdition( featureType ){\n                // Loop through each datatable, and refresh if it corresponds to the layer edited\n                $('.attribute-table-table[id]').each(function(){\n                    // get table id\n                    var tableId = $(this).attr('id');\n                    // verifying the id\n                    if ( !tableId )\n                        return true;\n\n                    var tableLayerName = $(this).parents('div.dataTables_wrapper:first').prev('input.attribute-table-hidden-layer').val()\n\n                    if ( tableLayerName\n                        && $.fn.dataTable.isDataTable( $(this) )\n                        && lizMap.cleanName( featureType ) == tableLayerName\n                    ){\n                        var zTable = '#' + tableId;\n                        var parentTable = zTable;\n                        var parentLayerCleanName = tableLayerName;\n                        var parentLayerName = featureType;\n                        var zClassNames = $(zTable).attr('class').split(' ');\n                        for(var zKey=0; zKey<zClassNames.length; zKey++) {\n                            if( !zClassNames[zKey].match('child-of-'))\n                                continue;\n\n                            parentLayerCleanName = zClassNames[zKey].substring('child-of-'.length);\n                            parentTable = '#attribute-layer-table-' + parentLayerCleanName;\n                            parentLayerName = attributeLayersDic[parentLayerCleanName];\n                            break;\n                        }\n                        // If child, re-highlight parent feature to refresh all the children\n                        // or update the edition table\n                        if( parentTable != zTable ){\n                            if( zTable.match('edition-table-') ) {\n                                // get info from the form\n                                var formFeatureId = $('#edition-form-container form input[name=\"liz_featureId\"]').val();\n                                var formLayerId = $('#edition-form-container form input[name=\"liz_layerId\"]').val();\n                                // get parent layer config\n                                var getParentLayerConfig = lizMap.getLayerConfigById( formLayerId );\n                                if ( (featureType in config.attributeLayers) && parentLayerName == getParentLayerConfig[0] ) {\n                                    // get featureType layer config\n                                    var featureTypeConfig = config.attributeLayers[featureType];\n                                    //get relation\n                                    var relation = getRelationInfo(formLayerId,featureTypeConfig.layerId);\n                                    if( relation != null ) {\n                                        lizMap.getLayerFeature(parentLayerName, formFeatureId, function(feat) {\n                                            var fp = feat.properties;\n                                            filter = '\"' + relation.referencingField + '\" = ' + \"'\" + fp[relation.referencedField] + \"'\";\n                                            getEditionChildData( featureType, filter, zTable);\n                                        });\n                                    }\n                                }\n                            } else {\n                                var parentHighlighted = config.layers[parentLayerName]['highlightedFeature'];\n                                if( parentHighlighted )\n                                    $(parentTable +' tr#' + parentHighlighted).click();\n                            }\n                        }\n                        // Else refresh main table with no filter\n                        else{\n                            // If not pivot\n                            var dFilter = null;\n                            getAttributeFeatureData( featureType, dFilter, null, 'extent', function(someName, someNameFilter, someNameFeatures){\n                                buildLayerAttributeDatatable( someName, zTable, someNameFeatures );\n                            });\n                        }\n                    }\n                });\n            }\n\n            function refreshDatatableSize(container){\n\n                var dtable = $(container).find('table.dataTable');\n\n                // Adapt height\n                var h = $(container + ' div.attribute-layer-content').height() ? $(container + ' div.attribute-layer-content').height() : 0;\n\n                h -= $(container + ' thead').height() ? $(container + ' thead').height() : 0;\n                h -= $(container + ' div.dataTables_paginate').height() ? $(container + ' div.dataTables_paginate').height() : 0;\n                h -= $(container + ' div.dataTables_filter').height() ? $(container + ' div.dataTables_filter').height() : 0;\n                h -= 20;\n\n                dtable.parent('div.dataTables_scrollBody').height(h);\n\n                // Width : adapt columns size\n                dtable.DataTable().tables().columns.adjust();\n            }\n\n            lizMap.refreshDatatableSize = function(container){\n              return refreshDatatableSize(container);\n            }\n\n            lizMap.events.on({\n\n                layerfeaturehighlighted: function(e) {\n                    config.layers[e.featureType]['highlightedFeature'] = e.fid;\n                    refreshChildrenLayersContent( e.sourceTable, e.featureType, e.fid );\n                },\n\n                layerfeatureselected: function(e) {\n                    refreshLayerSelection( e.featureType, e.fid, e.updateDrawing );\n                },\n\n                layerfeatureunselectall: function(e) {\n                    emptyLayerSelection( e.featureType, e.updateDrawing );\n                },\n\n                layerfeatureselectsearched: function(e) {\n                    setSelectedFeaturesFromSearchedFilter( e.featureType, e.updateDrawing );\n                },\n\n                layerfeaturefilterselected: function(e) {\n                    filterLayerFromSelectedFeatures( e.featureType );\n                },\n\n                layerfeatureremovefilter: function(e) {\n                    emptyLayerFilter( e.featureType );\n                },\n\n                layerSelectionChanged: function(e) {\n\n                    // Update attribute table tools\n                    updateAttributeTableTools( e.featureType );\n\n                    // Redraw attribute table content ( = add \"selected\" classes)\n                    redrawAttributeTableContent( e.featureType, e.featureIds );\n\n                    // Update openlayers layer drawing\n                    if( e.updateDrawing )\n                        updateMapLayerSelection( e.featureType );\n                },\n\n                layerFilteredFeaturesChanged: function(e) {\n\n                    // Update attribute table tools\n                    updateAttributeTableTools( e.featureType );\n\n                    // Update layer\n                    var cascadeToChildren = $('#jforms_view_attribute_layers_option_cascade_label input[name=\"cascade\"]').prop('checked');\n                    if ( 'cascade' in e )\n                        cascadeToChildren = e.cascade;\n                    updateMapLayerDrawing( e.featureType, cascadeToChildren );\n\n                },\n\n                lizmappopupdisplayed: function(e) {\n                    var hasButton = false;\n                    var popup = e.popup;\n                    var selector = 'div.lizmapPopupContent input.lizmap-popup-layer-feature-id';\n                    if ( e.containerId )\n                        selector = '#'+ e.containerId +' '+ selector;\n                    // Add action buttons if needed\n                    $(selector).each(function(){\n                        var self = $(this);\n                        var val = self.val();\n                        var eHtml = '';\n                        var fid = val.split('.').pop();\n                        var layerId = val.replace( '.' + fid, '' );\n\n                        // Select button\n                        var aConfig = lizMap.getLayerConfigById(\n                            layerId,\n                            config.attributeLayers,\n                            'layerId'\n                        );\n                        var getLayerConfig = lizMap.getLayerConfigById( layerId );\n                        if( aConfig && getLayerConfig && self.next('span.popupButtonBar').find('button.popup-layer-feature-select').length == 0) {\n                            var layerConfig = getLayerConfig[1];\n                            var selClass = '';\n                            if( $.inArray( fid, layerConfig['selectedFeatures'] ) != -1 )\n                                selClass = 'btn-warning';\n                            eHtml+= '<button class=\"btn btn-mini popup-layer-feature-select '+selClass+'\" value=\"';\n                            eHtml+= aConfig[0] + '.' + fid;\n                            eHtml+= '\" title=\"' + lizDict['attributeLayers.btn.select.title'] + '\"><i class=\"icon-ok\"></i>&nbsp;</button>';\n\n                            if( !startupFilter\n                                && (lizMap.lizmapLayerFilterActive == getLayerConfig[0] || !lizMap.lizmapLayerFilterActive )\n                            ){\n                                var filClass = '';\n                                if( $.inArray( fid, layerConfig['filteredFeatures'] ) != -1 )\n                                    filClass = 'btn-warning';\n                                eHtml+= '<button class=\"btn btn-mini popup-layer-feature-filter '+filClass+'\" value=\"';\n                                eHtml+= aConfig[0] + '.' + fid;\n                                eHtml+= '\" title=\"' + lizDict['attributeLayers.toolbar.btn.data.filter.title'] + '\"><i class=\"icon-filter\"></i>&nbsp;</button>';\n                            }\n                        }\n\n                        // Zoom button\n                        var popupButtonBar = self.next('span.popupButtonBar');\n                        var bboxZoomButton = popupButtonBar.find('button.popup-layer-feature-zoom');\n                        if ( bboxZoomButton.length == 0 )\n                            bboxZoomButton = popupButtonBar.find('button.popup-layer-feature-bbox-zoom');\n                        if( aConfig && getLayerConfig && bboxZoomButton.length == 0) {\n                            var layerConfig = getLayerConfig[1];\n                            eHtml+= '<button class=\"btn btn-mini popup-layer-feature-zoom\" value=\"';\n                            eHtml+= aConfig[0] + '.' + fid;\n                            eHtml+= '\" title=\"' + lizDict['attributeLayers.btn.zoom.title'] + '\"><i class=\"icon-zoom-in\"></i>&nbsp;</button>';\n                        }\n\n                        if( eHtml != '' ){\n                            if ( popupButtonBar.length != 0 ) {\n                                if ( bboxZoomButton.length == 0 )\n                                    popupButtonBar.append(eHtml);\n                                else\n                                    bboxZoomButton.before(eHtml);\n                            } else {\n                                eHtml = '<span class=\"popupButtonBar\">' + eHtml + '</span></br>';\n                                self.after(eHtml);\n                            }\n                            self.find('button.btn').tooltip( {\n                                placement: 'bottom'\n                            } );\n                            hasButton = true;\n                            if( popup )\n                                popup.verifySize();\n                        }\n\n                    });\n                    // Add interaction buttons\n                    if( hasButton ) {\n                        // Tooltips\n                        $('div.lizmapPopupContent button').tooltip();\n\n                        // select\n                        $('div.lizmapPopupContent button.popup-layer-feature-select')\n                        .unbind('click')\n                        .click(function(){\n                            var fid = $(this).val().split('.').pop();\n                            var featureType = $(this).val().replace( '.' + fid, '' );\n\n                            // Get already selected items\n                            var layerConfig = config.layers[featureType];\n                            var wasSelected = false;\n                            if( layerConfig['selectedFeatures'] && $.inArray( fid, layerConfig['selectedFeatures'] ) != -1 ){\n                                wasSelected = true;\n                                $(this).removeClass('btn-warning');\n                            }\n                            // Then select or unselect item\n                            lizMap.events.triggerEvent('layerfeatureselected',\n                                { 'featureType': featureType, 'fid': fid, 'updateDrawing': true}\n                            )\n                            if( !wasSelected ){\n                                $(this).addClass('btn-warning');\n                            }\n                            return false;\n                        })\n                        .hover(\n                            function(){ $(this).addClass('btn-primary'); },\n                            function(){ $(this).removeClass('btn-primary'); }\n                        );\n\n                        // Zoom\n                        $('div.lizmapPopupContent button.popup-layer-feature-zoom')\n                        .unbind('click')\n                        .click(function(){\n                            var fid = $(this).val().split('.').pop();\n                            var featureType = $(this).val().replace( '.' + fid, '' );\n\n                            // Remove map popup to avoid confusion\n                            if (lizMap.map.popups.length != 0)\n                                lizMap.map.removePopup( lizMap.map.popups[0] );\n\n                            lizMap.zoomToFeature( featureType, fid, 'zoom' );\n                            return false;\n                        })\n                        .hover(\n                            function(){ $(this).addClass('btn-primary'); },\n                            function(){ $(this).removeClass('btn-primary'); }\n                        );\n\n\n\n                        // filter\n                        if( !startupFilter ){\n                            $('div.lizmapPopupContent button.popup-layer-feature-filter')\n                            .unbind('click')\n                            .click(function(){\n                                var fid = $(this).val().split('.').pop();\n                                var featureType = $(this).val().replace( '.' + fid, '' );\n\n                                // Get already filtered items\n                                var layerConfig = config.layers[featureType];\n                                var wasFiltered = false;\n                                if( layerConfig['filteredFeatures'] && $.inArray( fid, layerConfig['filteredFeatures'] ) != -1 ){\n                                    wasFiltered = true;\n                                }\n\n                                // First deselect all features\n                                lizMap.events.triggerEvent('layerfeatureunselectall',\n                                    { 'featureType': featureType, 'updateDrawing': false}\n                                );\n\n                                if( !wasFiltered ){\n                                    // Then select this feature only\n                                    lizMap.events.triggerEvent('layerfeatureselected',\n                                        { 'featureType': featureType, 'fid': fid, 'updateDrawing': false}\n                                    );\n                                    // Then filter for the selected features\n                                    lizMap.events.triggerEvent('layerfeaturefilterselected',\n                                        { 'featureType': featureType}\n                                    );\n                                    lizMap.lizmapLayerFilterActive = featureType;\n                                    $(this).addClass('btn-warning');\n                                }else{\n                                    // Then remove filter for this selected feature\n                                    lizMap.events.triggerEvent('layerfeatureremovefilter',\n                                        { 'featureType': featureType }\n                                    );\n                                    $(this).removeClass('btn-warning');\n                                    lizMap.lizmapLayerFilterActive = null;\n                                }\n                                return false;\n                            })\n                            .hover(\n                                function(){ $(this).addClass('btn-primary'); },\n                                function(){ $(this).removeClass('btn-primary'); }\n                            );\n                        }\n                    }\n                },\n\n                lizmapeditionfeaturecreated: function(e){\n                    var getLayer = lizMap.getLayerConfigById( e.layerId, config.attributeLayers, 'layerId' );\n                    if( getLayer ){\n                        var featureType = getLayer[0];\n                        if( !(featureType in config.attributeLayers) )\n                            return false;\n                        refreshTablesAfterEdition( featureType );\n                    }\n                },\n\n                lizmapeditionfeaturemodified: function(e){\n                    var getLayer = lizMap.getLayerConfigById( e.layerId );\n                    if( getLayer ){\n                        var featureType = getLayer[0];\n                        if( !(featureType in config.attributeLayers) )\n                            return false;\n                        refreshTablesAfterEdition( featureType );\n                    }\n                },\n\n                lizmapeditionfeaturedeleted: function(e){\n                    var getLayer = lizMap.getLayerConfigById( e.layerId );\n                    if( getLayer ){\n                        var featureType = getLayer[0];\n                        if( !(featureType in config.attributeLayers) )\n                            return false;\n                        refreshTablesAfterEdition( featureType );\n                    } // todo : only remove line corresponding to deleted feature ?\n                },\n\n                // Filter layer when using \"Locate by layer\" tool\n                lizmaplocatefeaturechanged: function(e){\n                    if( !( e.featureType in config.attributeLayers) || startupFilter )\n                        return false;\n\n                    var aConfig = config.locateByLayer[e.featureType];\n                    var triggerFilterOnLocate = false;\n\n                    if( 'filterOnLocate' in aConfig && aConfig.filterOnLocate == 'True' )\n                        triggerFilterOnLocate = true;\n\n                    if( !triggerFilterOnLocate )\n                        return false;\n\n                    // Select feature\n                    lizMap.events.triggerEvent('layerfeatureselected',\n                        {'featureType': e.featureType, 'fid': e.featureId, 'updateDrawing': false}\n                    );\n                    // Filter selected feature\n                    lizMap.events.triggerEvent('layerfeaturefilterselected',\n                        {'featureType': e.featureType}\n                    );\n                },\n\n                lizmaplocatefeaturecanceled: function(e){\n\n                    lizMap.events.triggerEvent('layerfeatureremovefilter',\n                        {'featureType': e.featureType}\n                    );\n                },\n\n                lizmapeditionformdisplayed: function(e) {\n                    $('#edition-children-container').hide().html('');\n\n                    var fid =  e.featureId;\n                    // Do not disply child if it's a creation\n                    if ( !fid || fid == '' )\n                        return;\n\n                    var layerId = e.layerId;\n                    var getLayerConfig = lizMap.getLayerConfigById( layerId );\n\n                    if( getLayerConfig && 'relations' in lizMap.config && layerId in lizMap.config.relations ) {\n                        var relations = lizMap.config.relations[layerId];\n                        var featureType = getLayerConfig[0];\n                        var featureId = featureType + '.' + fid;\n                        if ( relations.length > 0 ) {\n                            var childHtml = getChildrenHtmlContent( featureType );\n                            var html = '';\n                            // Add children content\n                            if( childHtml ){\n                                // Add buttons to create new children\n                                if( childHtml['childCreateButton'] ) {\n                                    // Action bar\n                                    html+= '<div class=\"attribute-layer-action-bar\">';\n                                    html+= childHtml['childCreateButton'];\n                                    html+= '</div>';\n                                }\n                                // Add children content : one tab per childlayer\n                                html+= '<div class=\"tabbable edition-children-content\">';\n                                // Ul content\n                                html+= '    <ul class=\"nav nav-tabs\">';\n                                for( var i in childHtml['tab-li'] ){\n                                    var cLi = childHtml['tab-li'][i];\n                                    html+= cLi;\n                                }\n                                html+= '    </ul>';\n                                html+= '    <div class=\"tab-content\">';\n                                // Tab content\n                                for( var i in childHtml['tab-content'] ){\n                                    var cDiv = childHtml['tab-content'][i];\n                                    html+= cDiv;\n                                }\n                                html+= '    </div>'; // tab-content\n                                html+= '</div>'; // tabbable\n                            }\n                            $('#edition-children-container').show().append(html);\n                            $('#edition-children-container div.tabbable div.tab-pane input.attribute-table-hidden-parent-layer').after(\n                                '<input class=\"attribute-table-hidden-parent-feature-id\" value=\"'+fid+'\" type=\"hidden\">'\n                            );\n                            $('#edition-children-container div.tabbable ul.nav-tabs li').each(function() {\n                                $(this).attr('id', $(this).attr('id').replace(/nav-tab-attribute-child-tab-/g, 'nav-tab-edition-child-tab-'));\n                            });\n                            $('#edition-children-container div.tabbable ul.nav-tabs li a').each(function() {\n                                $(this).attr('href', $(this).attr('href').replace(/attribute-child-tab-/g, 'edition-child-tab-'));\n                            });\n                            $('#edition-children-container div.tabbable div.tab-content div.tab-pane').each(function() {\n                                $(this).attr('id', $(this).attr('id').replace(/attribute-child-tab-/g, 'edition-child-tab-'));\n                            });\n                            $('#edition-children-container div.tabbable div.tab-content table').each(function() {\n                                $(this).attr('id', $(this).attr('id').replace(/attribute-layer-/g, 'edition-'));\n                            });\n\n                            // Bind click on createFeature button\n                            $('#edition-children-container button.btn-createFeature-attributeTable')\n                            .click(function(){\n                                var parentFeatId = fid;\n                                var parentLayerName = featureType;\n                                var parentLayerId = layerId;\n                                var aName = attributeLayersDic[ $(this).val() ];\n                                lizMap.getLayerFeature(featureType, fid, function(parentFeat) {\n                                    var lid = config.layers[aName]['id'];\n                                    lizMap.launchEdition( lid, null, {layerId:parentLayerId,feature:parentFeat});\n                                });\n                                return false;\n                            })\n                            .hover(\n                                function(){ $(this).addClass('btn-primary'); },\n                                function(){ $(this).removeClass('btn-primary'); }\n                            );\n\n                            // Bind click on createFeature button via dropDown\n                            $('#edition-children-container a.btn-createFeature-attributeTable')\n                            .click(function(){\n                                var parentFeatId = fid;\n                                var parentLayerName = featureType;\n                                var parentLayerId = layerId;\n                                var selectedValue = $(this).attr('href').replace('#', '');\n                                var aName = attributeLayersDic[ selectedValue ];\n                                lizMap.getLayerFeature(featureType, fid, function(parentFeat) {\n                                    var lid = config.layers[aName]['id'];\n                                    lizMap.launchEdition( lid, null, {layerId:parentLayerId,feature:parentFeat});\n                                    $(this).blur();\n                                });\n                                return false;\n                            })\n                            .hover(\n                                function(){ $(this).addClass('btn-primary'); },\n                                function(){ $(this).removeClass('btn-primary'); }\n                            );\n                            lizMap.getLayerFeature(featureType, fid, function(feat) {\n                                var fp = feat.properties;\n                                for ( var i=0, len=relations.length; i<len; i++ ){\n                                    var r = relations[i];\n                                    var rLayerId = r.referencingLayer;\n                                    var rGetLayerConfig = lizMap.getLayerConfigById( rLayerId );\n                                    if ( rGetLayerConfig ) {\n                                        var rLayerName = rGetLayerConfig[0];\n                                        var rConfigLayer = rGetLayerConfig[1];\n                                        filter = '\"' + r.referencingField + '\" = ' + \"'\" + fp[r.referencedField] + \"'\";\n                                        // Get child table id\n                                        var childTable = '#edition-table-' + lizMap.cleanName(featureType) + '-' + lizMap.cleanName(rLayerName);\n\n                                        // Fill in attribute table for child\n                                        if( rLayerName in config.attributeLayers ) {\n                                            getEditionChildData( rLayerName, filter, childTable );\n                                        }\n                                    }\n                                }\n                            });\n                        }\n                    }\n                },\n\n                bottomdocksizechanged: function(evt) {\n                    var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                    refreshDatatableSize('#'+mycontainerId);\n                },\n                dockopened: function(evt) {\n                    if($('#mapmenu li.attributeLayers').hasClass('active')){\n                        var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                        refreshDatatableSize('#'+mycontainerId);\n                    }\n                },\n                dockclosed: function(evt) {\n                    if($('#mapmenu li.attributeLayers').hasClass('active')){\n                        var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                        refreshDatatableSize('#'+mycontainerId);\n                    }\n                },\n                rightdockopened: function(evt) {\n                    if($('#mapmenu li.attributeLayers').hasClass('active')){\n                        var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                        refreshDatatableSize('#'+mycontainerId);\n                    }\n                },\n                rightdockclosed: function(evt) {\n                    if($('#mapmenu li.attributeLayers').hasClass('active')){\n                        var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                        refreshDatatableSize('#'+mycontainerId);\n                    }\n                }\n\n            }); // lizMap.events.on end\n\n            // Extend lizMap API\n            lizMap.getAttributeFeatureData = getAttributeFeatureData;\n\n        } // uicreated\n    });\n\n}();\n"],"names":["lizMap","events","on","evt","config","hasAttributeTableLayers","layers","attributeLayersDic","wfsTypenameMap","mediaLinkPrefix","OpenLayers","Util","urlAppend","lizUrls","media","getParameterString","params","startupFilter","lizLayerFilter","lizmapLayerFilterActive","limitDataToBbox","options","wms","featureTypes","getVectorLayerFeatureTypes","length","$","css","attributeLayersSorted","lname","attributeLayers","al","name","push","sort","a","b","order","i","cleanName","featureType","typeName","getElementsByTagName","textContent","layername","getNameByTypeName","undefined","configLayerName","atConfig","layer","map","getLayersByName","triggerEvent","loadProjDefinition","crs","aProj","Projection","bbox","parseFloat","getAttribute","hide","hasDiplayedAttributeTable","tHtml","idx","lizDict","getRelationInfo","parentLayerId","childLayerId","relations","layerRelations","lridx","relation","referencingLayer","buildLinkParameters","layerId","lp","getP","getLayerConfigById","idSelected","fi","features","Object","keys","primaryKey","intRegex","x","afeat","pk","properties","test","getChildrenHtmlContent","parentLayerName","childHtml","childDiv","childLi","childCreateButton","childCreateButtonItems","layerLinkButton","layerLinkButtonItems","lConfig","childCount","childActive","lid","childLayerConfigA","childLayerConfig","childLayerName","childAttributeLayerConfig","tabId","cDiv","tId","tClass","cLi","title","canCreateChild","editionLayers","capabilities","createFeature","getDirectChildData","filter","childTable","getAttributeFeatureData","chName","chFilter","chFeatures","chAliases","buildLayerAttributeDatatable","html","click","this","val","ms","getScale","maxScale","minScale","msg","addMessage","attr","liHtml","append","selClass","filClass","canPopup","canCreate","alc","exportLayers","exportFormats","getVectorLayerResultFormat","len","format","toLowerCase","tooltip","placement","tabContentId","parent","remove","tab","e","target","find","DataTable","tables","columns","adjust","removeClass","aTable","someName","someNameFilter","someNameFeatures","someNameAliases","show","refreshDatatableSize","hover","addClass","parentDir","parents","toggleClass","toggle","hasClass","aName","dTable","previousOrder","grep","o","newOrder","concat","draw","scrollTop","eFormat","text","replace","eName","exportVectorLayer","blur","parentFeatId","getLayerFeature","parentFeat","launchEdition","feature","selectedValue","cName","cId","attrConfig","p","pName","pId","doQuery","pivot","parId","par","parKey","chi","rp","rpItem","referencingField","service","edition","post","features1","join","features2","data","addLayerDiv","change","doCascade","prop","updateAttributeTableTools","cascadeToChildren","updateMapLayerDrawing","moveend","btitle","timer","lizdelay","callback","clearTimeout","setTimeout","refreshLayerAttributeDatatable","cFeatures","aCallback","isChild","parentLayerID","includes","startsWith","split","isPivot","hiddenFields","trim","oTable","canEdit","canDelete","modifyAttribute","modifyGeometry","deleteFeature","key","ff","formatDatatableFeatures","foundFeatures","dataSet","fn","dataTable","isDataTable","fnClearTable","fnAddData","cAliases","cTypes","atFeatures","dataLength","cdc","geometryType","firstDisplayedColIndex","inArray","colConf","type","full","meta","valueMapInAttributeTable","tdata","substr","rdata","colMeta","settings","aoColumns","col","slice","colToReturn","isEmptyObject","atc","lizcols","newcolumns","newpos","colx","attributes","fieldname","colhidden","hidden","mData","splice","cfrom","newcolumnsfinal","createDatatableColumns","refillFeatures","searchWhileTyping","myDom","searchVal","value","fnFilter","drawCallback","api","Api","repository","project","id","editableFeaturesId","table","cells","nodes","to$","children","initComplete","json","node","language","url","deferRender","createdRow","row","dataIndex","DT_RowId","toString","lizSelected","dom","pageLength","scrollY","scrollX","next","focus","keyup","unbind","featId","feat","parentLayerCleanName","getFeaturePopupContent","bindTableLineClick","bindTableSelectButton","zoomAction","zoomToFeature","bindTableZoomButton","bindTableEditButton","bindTableDeleteButton","cFkey","cc","cPkeyVal","eService","pkey","pkeyval","fkey","bindTableUnlinkButton","colName","translateWfsFieldValues","selectedFeatures","forEach","line","fid","selectCol","editCol","delIcon","delTitle","deleteCol","unlinkCol","zoomCol","centerCol","aClass","featureId","eConfig","deleteConfirm","eProp","y","deleteEditionFeature","aLID","aFID","hasFilter","getEditionChildData","formFeatureId","formLayerId","layerConfig","dt","c","dataSrc","column","visible","createHeader","header","tabPane","layerName","getLayerNameByCleanName","aFilter","aFeatureID","aGeometryName","aCallBack","qgisName","getNameByCleanName","console","log","getFeatureData","emptyLayerSelection","arefresh","updateLayer","typeNamePile","typeNameFilter","typeNameDone","cascade","shift","aNameFilter","aNameFeatures","aNameAliases","typeNameId","typeNamePkey","typeNamePkeyValues","typeNameChildren","getAttributeLayerConfig","attributeLayerConfig","childParam","buildChildParam","pivotParam","getPivotParam","filteredFeatures","types","cData","layerN","lFilter","simpleFilter","surl","sdata","request","typename","result","token","redraw","opTable","cFilter","wmsCname","wlayer","pwmsName","pwlayer","referencedField","applyEmptyLayerFilter","applyLayerFilter","trFilteredBgcolor","childLayerKeyName","relationIsPivot","otherParentId","otherParentRelation","otherParentTypeName","rx","otherParentConfig","aLayerRelations","xx","tableSelector","callBack","document","body","style","cursor","getDataAndRefreshAttributeTable","ids","selIds","filIds","refreshTablesAfterEdition","each","tableId","tableLayerName","prev","zTable","parentTable","zClassNames","zKey","match","substring","getParentLayerConfig","fp","parentHighlighted","container","dtable","h","height","layerfeaturehighlighted","sourceTable","refreshChildrenLayersContent","layerfeatureselected","rupdateDrawing","refreshLayerSelection","updateDrawing","layerfeatureunselectall","layerfeatureselectsearched","supdateDrawing","hasChanged","sIds","filteredrowids","rows","setSelectedFeaturesFromSearchedFilter","layerfeaturefilterselected","filterLayerFromSelectedFeatures","layerfeatureremovefilter","emptyLayerFilter","layerSelectionChanged","featureIds","rTable","every","fnUpdate","d","request_params","updateMapLayerSelection","layerFilteredFeaturesChanged","lizmappopupdisplayed","hasButton","popup","selector","containerId","self","eHtml","pop","aConfig","getLayerConfig","popupButtonBar","bboxZoomButton","before","after","verifySize","wasSelected","popups","removePopup","wasFiltered","lizmapeditionfeaturecreated","getLayer","lizmapeditionfeaturemodified","lizmapeditionfeaturedeleted","lizmaplocatefeaturechanged","locateByLayer","triggerFilterOnLocate","filterOnLocate","lizmaplocatefeaturecanceled","lizmapeditionformdisplayed","r","rLayerId","rGetLayerConfig","rLayerName","bottomdocksizechanged","dockopened","dockclosed","rightdockopened","rightdockclosed"],"sourceRoot":""}