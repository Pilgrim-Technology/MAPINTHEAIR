{"version":3,"file":"../../lizmap/www/assets/js/filter.js","mappings":"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","sources":["webpack://assets/./src/legacy/filter.js"],"sourcesContent":["var lizLayerFilterTool = function () {\n\n    lizMap.events.on({\n        'uicreated': function () {\n\n\n            // If filterConfig is empty, there is no filter set => hide filter tool\n            if (!filterConfig || (filterConfig.constructor === Object && Object.keys(filterConfig).length === 0)) {\n                $('#mapmenu li.filter.nav-dock').addClass('hide');\n                return true;\n            }\n\n\n            // Compute the HTML container for the form\n            function getLayerFilterDockRoot() {\n                var html = '';\n\n                html += '<div class=\"menu-content\">';\n                // Add combo box to select the layer\n                html += '<select id=\"liz-filter-layer-selector\">';\n                var flayers = {};\n                for (var o in filterConfig) {\n                    var conf = filterConfig[o];\n                    if (!(conf.layerId in flayers)) {\n                        // Get layer\n                        var layerId = conf.layerId;\n                        var lconfig_get = lizMap.getLayerConfigById(layerId);\n                        if (!lconfig_get)\n                            continue;\n                        var lname = lconfig_get[0];\n                        var lconf = lconfig_get[1];\n                        var displayName = lname;\n                        if ('title' in lconf && lconf.title != '') {\n                            displayName = lconf.title;\n                        }\n                        html += '<option value=\"' + layerId + '\">' + displayName + '</option>';\n                        flayers[layerId] = true;\n                    }\n                }\n                html += '</select></br>';\n\n                // Add total feature counter\n                var total = 0\n                html += '<b><span id=\"liz-filter-item-layer-total-count\">' + total + '</span> ' + lizDict['filter.label.features'] + '</b>';\n\n                // Add zoom link\n                html += '<br/><button id=\"liz-filter-zoom\" class=\"btn btn-mini btn-primary\" title=\"' + lizDict['filter.btn.zoom.title'] + '\">' + lizDict['filter.btn.zoom.label'] + '</button>';\n\n                // Add export button\n                if (lizMap.getVectorLayerResultFormat().includes('ODS')) {\n                    html += '&nbsp;&nbsp;<button id=\"liz-filter-export\" class=\"btn btn-mini btn-primary\" title=\"' + lizDict['filter.btn.export.title'] + '\">' + lizDict['filter.btn.export.label'] + '</button>';\n                }\n\n                // Add unfilter link\n                html += '&nbsp;&nbsp;<button id=\"liz-filter-unfilter\" class=\"btn btn-mini btn-primary\" title=\"' + lizDict['filter.btn.reset.title'] + '\">' + lizDict['filter.btn.reset.label'] + '</button>';\n\n                html += '</div>';\n\n                // Add tree\n                html += '<div style=\"padding:10px 10px;\" class=\"tree menu-content\"></div>';\n\n                return html;\n            }\n\n            function addLayerFilterToolInterface() {\n                if (!filterConfig || (filterConfig.constructor === Object && Object.keys(filterConfig).length === 0)) {\n                    return false;\n                }\n\n                // Build interface html code\n                // Add dock\n                var html = getLayerFilterDockRoot();\n                $('#filter-content').html(html);\n\n                // Get 1st layer found as default layer\n                var layerId = filterConfig[0]['layerId'];\n                filterConfigData.layerId = layerId;\n\n                // Activate the unfilter link\n                $('#liz-filter-unfilter').click(function () {\n                    // Remove filter\n                    deactivateFilter();\n                    return false;\n                });\n\n                // Activate the zoom button\n                $('#liz-filter-zoom').click(function () {\n                    zoomToFeatures()\n                    return false;\n                });\n\n                // Activate the export button\n                if (lizMap.getVectorLayerResultFormat().includes('ODS')) {\n                    $('#liz-filter-export').click(function () {\n                        lizMap.config.layers[filterConfigData.layerName].request_params['filter'] = filterConfigData.filter;\n                        lizMap.exportVectorLayer(filterConfigData.layerName, 'ODS', false);\n                        delete lizMap.config.layers[filterConfigData.layerName].request_params['filter'];\n                        return false;\n                    });\n                }\n\n                // Add tooltip\n                $('#filter-content [title]').tooltip();\n            }\n\n            // Launch the form filter feature\n            function launchLayerFilterTool(layerId) {\n\n                // Get layer name\n                var getConfig = lizMap.getLayerConfigById(layerId);\n                if (!getConfig)\n                    return false;\n                var layerName = getConfig[0];\n                filterConfigData.layerName = layerName;\n\n                // Remove previous field inputs\n                $('div.liz-filter-field-box').remove();\n\n                // Get html and add it\n                getLayerFilterForm();\n\n                // Limit dock size\n                adaptLayerFilterSize();\n\n                // Get Feature count\n                getFeatureCount();\n\n                // Set default zoom extent setZoomExtent\n                // Only if first query works\n                // Which means PHP spatialite extension is activated\n                if ($('#liz-filter-zoom').is(\":visible\")) {\n                    setZoomExtent();\n                }\n            }\n\n            // Get the HTML form\n            // By getting form element for each field\n            function getLayerFilterForm() {\n                var layerId = filterConfigData.layerId;\n\n                // Sort attribute layers as given by creation order in Lizmap plugin\n                var formFilterLayersSorted = [];\n                for (var o in filterConfig) {\n                    var field_item = filterConfig[o];\n                    if ('title' in field_item && field_item.layerId == layerId) {\n                        formFilterLayersSorted.push(field_item);\n                        $(\"#filter div.tree\").append('<div id=\"filter-field-order' + String(field_item.order) + '\"></div>');\n                    }\n                }\n\n                // Add form fields\n                for (var conf in formFilterLayersSorted) {\n\n                    var field_item = formFilterLayersSorted[conf];\n                    getFormFieldInput(field_item);\n                }\n            }\n\n            // Get the HTML form elemnt for a specific field\n            function getFormFieldInput(field_item) {\n                var field_config = filterConfig[field_item.order];\n\n                // unique values\n                if (field_config['type'] == 'uniquevalues') {\n                    return uniqueValuesFormInput(field_item);\n                }\n\n                // date\n                if (field_config['type'] == 'date') {\n                    return dateFormInput(field_item);\n                }\n\n                // numeric\n                if (field_config['type'] == 'numeric') {\n                    return numericFormInput(field_item);\n                }\n\n                // text\n                if (field_config['type'] == 'text') {\n                    return textFormInput(field_item);\n                }\n\n                return '';\n            }\n\n            function getFormFieldHeader(field_item) {\n                var html = '';\n                html += '<div class=\"liz-filter-field-box\" id=\"liz-filter-box-';\n                html += lizMap.cleanName(field_item.title);\n                html += '\">';\n                var flabel = field_item.title;\n                html += '<span style=\"font-weight:bold;\">' + flabel + '</span>';\n                html += '<button class=\"btn btn-primary btn-mini pull-right liz-filter-reset-field\" title=\"' + lizDict['filter.btn.reset.title'] + '\" value=\"' + field_item.order + '\">x</button>';\n                html += '<p>';\n\n                return html;\n            }\n\n            function getFormFieldFooter() {\n                var html = '';\n                html += '</p>';\n                html += '</div>';\n\n                return html;\n            }\n\n            function checkResult(result) {\n                if (!result) {\n                    return false;\n                }\n                if ('status' in result && result['status'] == 'error') {\n                    console.log(result.title + ': ' + result.detail);\n                    return false;\n                }\n                return true;\n            }\n\n            // Get the HTML form element for the date field type\n            function dateFormInput(field_item) {\n                // max_date = min_date when undefined\n                const max_date = ('max_date' in field_item) ? field_item.max_date : field_item.min_date;\n\n                var sdata = {\n                    request: 'getMinAndMaxValues',\n                    layerId: field_item.layerId,\n                    fieldname: field_item.min_date + ',' + max_date,\n                    filter: ''\n                };\n                $.get(filterConfigData.url, sdata, function (result) {\n                    if (!checkResult(result)) {\n                        return false;\n                    }\n\n                    for (var a in result) {\n                        var feat = result[a];\n                        // Add minutes to time zone offset when not present (needed for Firefox).\n                        if (feat['min'][feat['min'].length - 3] === '+') {\n                            feat['min'] = feat['min'] + ':00';\n                        }\n                        if (feat['max'][feat['max'].length - 3] === '+') {\n                            feat['max'] = feat['max'] + ':00';\n                        }\n                        var dmin = formatDT(new Date(feat['min']), 'yy-mm-dd');\n                        var dmax = formatDT(new Date(feat['max']), 'yy-mm-dd');\n                        filterConfig[field_item.order]['min'] = dmin;\n                        filterConfig[field_item.order]['max'] = dmax;\n                    }\n\n                    var html = '';\n                    html += getFormFieldHeader(field_item);\n                    html += '<span style=\"white-space:nowrap\">';\n                    html += '<input id=\"liz-filter-field-min-date' + lizMap.cleanName(field_item.title) + '\" class=\"liz-filter-field-date\" value=\"' + field_item['min'] + '\" style=\"width:100px;\">';\n                    html += '<input id=\"liz-filter-field-max-date' + lizMap.cleanName(field_item.title) + '\" class=\"liz-filter-field-date\" value=\"' + field_item['max'] + '\" style=\"width:100px;\">';\n                    html += '</span>';\n\n                    // http://jsfiddle.net/Lcrsd3jt/45/\n                    // pour avoir un date et time picker, see https://github.com/trentrichardson/jQuery-Timepicker-Addon\n                    html += '<div id=\"liz-filter-datetime-range' + lizMap.cleanName(field_item.title) + '\">';\n                    html += '    <div>';\n                    html += '        <div id=\"liz-filter-slider-range' + lizMap.cleanName(field_item.title) + '\"></div>';\n                    html += '    </div>';\n                    html += '</div>';\n\n                    html += getFormFieldFooter(field_item);\n                    $(\"#filter-field-order\" + String(field_item.order)).append(html);\n                    $(\"#filter input.liz-filter-field-date\").datepicker({\n                        dateFormat: 'yy-mm-dd',\n                        changeMonth: true,\n                        changeYear: true,\n                        minDate: new Date(feat['min']),\n                        maxDate: new Date(feat['max'])\n                    });\n\n                    addFieldEvents(field_item);\n\n                }, 'json');\n\n            }\n\n            // Get the HTML form element for the numeric field type\n            function numericFormInput(field_item) {\n                var sdata = {\n                    request: 'getMinAndMaxValues',\n                    layerId: field_item.layerId,\n                    fieldname: field_item['field'],\n                    filter: ''\n                };\n                $.get(filterConfigData.url, sdata, function (result) {\n                    if (!checkResult(result)) {\n                        return false;\n                    }\n\n                    for (var a in result) {\n                        var feat = result[a];\n                        filterConfig[field_item.order]['min'] = Number(feat['min']);\n                        filterConfig[field_item.order]['max'] = Number(feat['max']);\n                    }\n\n                    var html = '';\n                    html += getFormFieldHeader(field_item);\n                    html += '<span style=\"white-space:nowrap\">';\n                    html += '<input id=\"liz-filter-field-min-numeric' + lizMap.cleanName(field_item.title) + '\" type=\"number\" value=\"' + field_item['min'] + '\" step=\"' + 1 + '\" min=\"' + field_item['min'] + '\" max=\"' + field_item['max'] + '\" class=\"liz-filter-field-numeric\" style=\"width:100px;\">';\n                    html += '<input id=\"liz-filter-field-max-numeric' + lizMap.cleanName(field_item.title) + '\" type=\"number\" value=\"' + field_item['max'] + '\" step=\"' + field_item['step'] + '\" min=\"' + field_item['min'] + '\" max=\"' + field_item['max'] + '\" class=\"liz-filter-field-numeric\" style=\"width:100px;\">';\n                    html += '</span>';\n\n                    html += '<div id=\"liz-filter-numeric-range' + lizMap.cleanName(field_item.title) + '\">';\n                    html += '    <div>';\n                    html += '        <div id=\"liz-filter-slider-range' + lizMap.cleanName(field_item.title) + '\"></div>';\n                    html += '    </div>';\n                    html += '</div>';\n\n                    html += getFormFieldFooter(field_item);\n\n                    $(\"#filter-field-order\" + String(field_item.order)).append(html);\n\n                    addFieldEvents(field_item);\n\n                }, 'json');\n\n            }\n\n            // Get the HTML form element for the text field type\n            function textFormInput(field_item) {\n                // Ajout des données d'autocompletion\n                var field = field_item['field'];\n                var sdata = {\n                    request: 'getUniqueValues',\n                    layerId: field_item.layerId,\n                    fieldname: field,\n                    filter: ''\n                };\n                $.get(filterConfigData.url, sdata, function (result) {\n                    if (!checkResult(result)) {\n                        return false;\n                    }\n\n                    var autocompleteData = [];\n                    for (var a in result) {\n                        var feat = result[a];\n                        if (feat['v'] === null || !feat['v'] || (typeof feat['v'] === 'string' && feat['v'].trim() === ''))\n                            continue;\n                        autocompleteData.push(feat['v']);\n                    }\n\n                    var html = '';\n                    html += getFormFieldHeader(field_item);\n                    html += '<div style=\"width: 100%;\">'\n                    html += '<input id=\"liz-filter-field-text' + lizMap.cleanName(field_item.title) + '\" class=\"liz-filter-field-text\" value=\"\" title=\"' + lizDict['filter.input.text.title'] + '\" placeholder=\"' + lizDict['filter.input.text.placeholder'] + '\">';\n                    html += '</div>'\n                    html += getFormFieldFooter(field_item);\n\n                    $(\"#filter-field-order\" + String(field_item.order)).append(html);\n                    addFieldEvents(field_item);\n\n                    $(\"#liz-filter-field-text\" + lizMap.cleanName(field_item.title)).autocomplete({\n                        source: autocompleteData,\n                        autoFocus: false, // do not autofocus, because this prevents from searching with LIKE\n                        delay: 200,\n                        minLength: 2,\n                        select: function (event, ui) {\n                            $(this).val(ui.item.value);\n                            $(this).change();\n                        }\n                    });\n                }, 'json');\n            }\n\n            // Get the HTML form element for the uniqueValues field type\n            // possible format: checkboxes or select\n            function uniqueValuesFormInput(field_item) {\n\n                // Get unique values data (and counters)\n                var sdata = {\n                    request: 'getUniqueValues',\n                    layerId: field_item.layerId,\n                    fieldname: field_item.field,\n                    filter: ''\n                };\n                $.get(filterConfigData.url, sdata, function (result) {\n                    if (!checkResult(result)) {\n                        return false;\n                    }\n\n                    var html = '';\n                    html += getFormFieldHeader(field_item);\n\n                    if (field_item.format == 'select') {\n                        html += '<select id=\"liz-filter-field-' + lizMap.cleanName(field_item.title) + '\" class=\"liz-filter-field-select\">';\n                        html += '<option value=\"\"> --- </option>';\n                        html += '</select>';\n                    }\n                    html += getFormFieldFooter(field_item);\n\n                    $(\"#filter-field-order\" + String(field_item.order)).append(html);\n\n                    if (!('items' in filterConfig[field_item.order]))\n                        filterConfig[field_item.order]['items'] = {};\n                    for (var a in result) {\n                        var feat = result[a];\n                        filterConfig[field_item.order]['items'][feat['v']] = feat['c'];\n                    }\n\n                    var dhtml = '';\n                    var fkeys = Object.keys(\n                        filterConfig[field_item.order]['items']\n                    );\n\n                    // Order fkeys alphabetically (which means sort checkboxes for each field)\n                    fkeys.sort(function (a, b) {\n                        return a.localeCompare(b);\n                    });\n\n                    for (var z in fkeys) {\n                        var f_val = fkeys[z];\n                        var label = f_val;\n\n                        if (field_item.format == 'select') {\n                            dhtml += '<option value=\"' + lizMap.cleanName(f_val) + '\">';\n                        } else {\n                            var inputId = 'liz-filter-field-' + lizMap.cleanName(field_item.title) + '-' + lizMap.cleanName(f_val);\n                            dhtml += '<span style=\"font-weight:normal;\">';\n\n                            dhtml += '<button id=\"' + inputId + '\" class=\"btn checkbox liz-filter-field-value\" value=\"' + lizMap.cleanName(f_val) + '\"></button>';\n\n                        }\n                        dhtml += '&nbsp;' + label;\n\n                        // close item\n                        if (field_item.format == 'select') {\n                            dhtml += '</option>';\n                        } else {\n                            dhtml += '</span></br>';\n                        }\n\n                    }\n                    var id = 'liz-filter-box-' + lizMap.cleanName(field_item.title);\n                    if (field_item.format == 'select') {\n                        $('#' + id + ' select').append(dhtml);\n                    } else {\n                        $('#' + id + ' p').append(dhtml);\n                    }\n\n                    addFieldEvents(field_item);\n                }, 'json');\n            }\n\n            // Generate filter string for a field\n            // Depending on the selected inputs\n            function setFormFieldFilter(field_item) {\n                if (filterConfigData.deactivated) {\n                    return false;\n                }\n\n                // Set filter depending on field type\n                // Unique values\n                if (field_item.type == 'uniquevalues') {\n                    setUniqueValuesFilter(field_item);\n                }\n\n                // Dates\n                if (field_item.type == 'date') {\n                    setDateFilter(field_item);\n                }\n\n                // Numeric\n                if (field_item.type == 'numeric') {\n                    setNumericFilter(field_item);\n                }\n\n                // Texte\n                if (field_item.type == 'text') {\n                    setTextFilter(field_item);\n                }\n\n                // Update global form filter\n                setFormFilter();\n            }\n\n            // Set the filter for the uniqueValues field type\n            function setUniqueValuesFilter(field_item) {\n                var field_config = filterConfig[field_item.order]\n\n                // First loop through each field value\n                // And check if the item (e.g checkbox) is selected or not\n                filterConfig[field_item.order]['data'] = {}\n                var allchecked = true;\n                var nonechecked = true;\n                if (field_config.format == 'select') {\n                    var selectId = '#liz-filter-field-' + lizMap.cleanName(field_item.title);\n                    var selectVal = $(selectId).val();\n                    var clist = [];\n                    for (var f_val in filterConfig[field_item.order]['items']) {\n                        // Get checked status\n                        if (Array.isArray(selectVal)) {\n                            var achecked = selectVal.includes(lizMap.cleanName(f_val));\n                        } else {\n                            var achecked = (selectVal == lizMap.cleanName(f_val));\n                        }\n                        if (!achecked) {\n                            allchecked = false;\n                        } else {\n                            nonechecked = false;\n                            clist.push(f_val.replace(/'/g, \"''\"));\n                        }\n                        filterConfig[field_item.order]['data'][f_val] = achecked;\n                    }\n                }\n                if (field_config.format == 'checkboxes') {\n                    var clist = [];\n                    for (var f_val in filterConfig[field_item.order]['items']) {\n                        // Get checked status\n                        var inputId = '#liz-filter-field-' + lizMap.cleanName(field_item.title) + '-' + lizMap.cleanName(f_val);\n                        var achecked = $(inputId).hasClass('checked');\n                        if (!achecked) {\n                            allchecked = false;\n                        } else {\n                            nonechecked = false;\n                            clist.push(f_val.replace(/'/g, \"''\"));\n                        }\n                        filterConfig[field_item.order]['data'][f_val] = achecked;\n                    }\n                }\n                filterConfig[field_item.order]['allchecked'] = allchecked;\n                filterConfig[field_item.order]['nonechecked'] = nonechecked;\n                filterConfig[field_item.order]['selected'] = clist;\n                var filter = null;\n                var field = field_item['field'];\n                if (clist.length) {\n                    // If there is a separator in the field values, and we need\n                    // to explode the values into single items, we need to use\n                    // LIKE statements joined with OR\n                    if ('splitter' in field_item && field_item['splitter'] != '') {\n\n                        filter = ' ( ';\n                        var sep = '';\n                        var lk = 'LIKE';\n\n                        // For a PostgreSQL layer, we can use ILIKE instead of LIKE\n                        // for WMS filtered requests to be case insensitive\n                        if (field_item.provider == 'postgres') {\n                            lk = 'ILIKE';\n                        }\n                        for (var i in clist) {\n                            var cval = clist[i];\n                            filter += sep + '\"' + field + '\"' + \" \" + lk + \" '%\" + cval + \"%' \";\n                            // We need to use a OR to display features with\n                            // 'Theatre, Culture' or 'Theatre', or 'Culture, Information'\n                            // When 'Theatre' and 'Culture' are checked in the list\n                            sep = ' OR ';\n                        }\n                        filter += ' ) ';\n                    } else {\n                        // If there is not separator in the field values, use IN to get all features\n                        // corresponding to one of the checked values\n                        filter = '\"' + field + '\"' + \" IN ( '\" + clist.join(\"' , '\") + \"' ) \";\n                    }\n                }\n                filterConfig[field_item.order]['filter'] = filter;\n\n            }\n\n            // Set the filter for the Date type\n            function setDateFilter(field_item) {\n                var filters = [];\n\n                // get input values\n                var min_id = '#liz-filter-field-min-date' + lizMap.cleanName(field_item.title);\n                var max_id = '#liz-filter-field-max-date' + lizMap.cleanName(field_item.title);\n                var min_val = $(min_id).val().trim();\n                var max_val = $(max_id).val().trim();\n\n                // Do nothing if min and max values entered equals the field min and max possible values\n                if (min_val == field_item['min'] && max_val == field_item['max']) {\n                    filterConfig[field_item.order]['filter'] = null;\n                    return true;\n                }\n\n                // fields\n                var startField = field_item.min_date;\n                var endField = ('max_date' in field_item) ? field_item.max_date : field_item.min_date;\n\n                // min date filter\n                if (min_val && Date.parse(min_val)) {\n                    filters.push('( \"' + startField + '\"' + \" >= '\" + min_val + \"'\" + \" OR \" + ' \"' + endField + '\"' + \" >= '\" + min_val + \"' )\");\n                } else {\n                    min_val = null;\n                }\n\n                // max date filter\n                if (max_val && Date.parse(max_val)) {\n                    filters.push('( \"' + startField + '\"' + \" <= '\" + max_val + \"'\" + \" OR \" + ' \"' + endField + '\"' + \" <= '\" + max_val + \"' )\");\n                } else {\n                    max_val = null;\n                }\n\n                var filter = null;\n                if (filters.length) {\n                    var filter = ' ( ';\n                    filter += filters.join(' AND ');\n                    filter += ' ) ';\n                }\n                filterConfig[field_item.order]['data'] = {\n                    'min_date': min_val,\n                    'max_date': max_val\n                };\n                filterConfig[field_item.order]['filter'] = filter;\n\n            }\n\n            // Set the filter for the Numeric type\n            function setNumericFilter(field_item) {\n                var filters = [];\n\n                // get input values\n                var min_id = '#liz-filter-field-min-numeric' + lizMap.cleanName(field_item.title);\n                var max_id = '#liz-filter-field-max-numeric' + lizMap.cleanName(field_item.title);\n                var min_val = $(min_id).val().trim();\n                var max_val = $(max_id).val().trim();\n\n                // Do nothing if min and max values entered equals the field min and max possible values\n                if (min_val == field_item['min'] && max_val == field_item['max']) {\n                    filterConfig[field_item.order]['filter'] = null;\n                    return true;\n                }\n\n                // field\n                var field = field_item['field'];\n\n                // min value filter\n                if (min_val != '') {\n                    filters.push('( \"' + field + '\"' + \" >= '\" + min_val + \"' )\");\n                } else {\n                    min_val = null;\n                }\n\n                // max value filter\n                if (max_val != '') {\n                    filters.push('( \"' + field + '\"' + \" <= '\" + max_val + \"' )\");\n                } else {\n                    max_val = null;\n                }\n\n                var filter = null;\n                if (filters.length) {\n                    var filter = ' ( ';\n                    filter += filters.join(' AND ');\n                    filter += ' ) ';\n                }\n                filterConfig[field_item.order]['data'] = {\n                    'min': min_val,\n                    'max': max_val\n                };\n                filterConfig[field_item.order]['filter'] = filter;\n\n            }\n\n            // Set the filter for a text field_item\n            function setTextFilter(field_item) {\n\n                var id = '#liz-filter-field-text' + lizMap.cleanName(field_item.title);\n                var val = $(id).val().trim().replace(/'/g, \"''\");\n\n                filterConfig[field_item.order]['data'] = {\n                    'text': val\n                };\n                var filter = null;\n                var lk = 'LIKE';\n                if (field_item.provider == 'postgres') {\n                    lk = 'ILIKE';\n                }\n                var field = field_item['field'];\n                if (val) {\n                    filter = '\"' + field + '\"' + \" \" + lk + \" '%\" + val + \"%'\";\n                }\n\n                filterConfig[field_item.order]['data'] = {\n                    'text': val\n                };\n                filterConfig[field_item.order]['filter'] = filter;\n            }\n\n\n            // Compute the global filter to pass to the layer\n            function setFormFilter() {\n                var layerId = filterConfigData.layerId;\n\n                var afilter = [];\n                for (var o in filterConfig) {\n                    var field_item = filterConfig[o];\n                    if ('title' in field_item && field_item['filter'] && field_item.layerId == layerId) {\n                        afilter.push(field_item['filter']);\n                    }\n                }\n                var filter = afilter.join(' AND ');\n\n                // Trigger the filter on the layer\n                var layerName = filterConfigData.layerName;\n                lizMap.triggerLayerFilter(layerName, filter);\n\n                getFeatureCount(filter);\n\n                if ($('#liz-filter-zoom').is(\":visible\")) {\n                    setZoomExtent(filter);\n                }\n\n                filterConfigData.filter = filter;\n\n            }\n\n            // Deactivate the layer filter\n            // And display all features\n            function deactivateFilter() {\n                var layerId = filterConfigData.layerId;\n\n                // Deactivate all triggers to avoid unnecessary requests\n                filterConfigData.deactivated = true;\n                for (var o in filterConfig) {\n                    var field_item = filterConfig[o];\n                    if ('title' in field_item && field_item.layerId == layerId) {\n                        resetFormField(field_item.order);\n                    }\n                }\n                filterConfigData.deactivated = false;\n\n                // Remove filter on map layers\n                var layerName = filterConfigData.layerName;\n                lizMap.deactivateMaplayerFilter(layerName);\n\n                // Refresh plots\n                lizMap.events.triggerEvent(\"layerFilterParamChanged\",\n                    {\n                        'featureType': layerName,\n                        'filter': null,\n                        'updateDrawing': false\n                    }\n                );\n\n                // Get feature count\n                getFeatureCount();\n\n                // Set zoom extent\n                if ($('#liz-filter-zoom').is(\":visible\")) {\n                    setZoomExtent();\n                }\n\n                // Remove feature info geometry\n                removeFeatureInfoGeometry();\n\n            }\n\n            function resetFormField(field_item_order) {\n\n                var field_item = filterConfig[field_item_order];\n\n                if (field_item.type == 'date') {\n                    $('#liz-filter-field-min-date' + lizMap.cleanName(field_item.title)).val(field_item['min']);\n                    $('#liz-filter-field-max-date' + lizMap.cleanName(field_item.title)).val(field_item['max']).change(); // .change() so that the slider is also resetted\n                }\n                else if (field_item['type'] == 'numeric') {\n                    $('#liz-filter-field-min-numeric' + lizMap.cleanName(field_item.title)).val(field_item['min']);\n                    $('#liz-filter-field-max-numeric' + lizMap.cleanName(field_item.title)).val(field_item['max']).change();\n                }\n                else if (field_item['type'] == 'uniquevalues') {\n                    if (field_item.format == 'checkboxes') {\n                        $('#liz-filter-box-' + lizMap.cleanName(field_item.title) + ' button.liz-filter-field-value.checked').removeClass('checked');\n                    }\n                    else if (field_item.format == 'select') {\n                        var selectField = $('#liz-filter-field-' + lizMap.cleanName(field_item.title));\n                        // If the select is multiple && sumoSelect has been used to transform the combobox\n                        if ('sumo' in selectField[0]) {\n                            if (selectField[0].hasAttribute('multiple')) {\n                                selectField[0].sumo.unSelectAll();\n                            } else {\n                                selectField[0].sumo.unSelectItem(selectField.val());\n                            }\n                        } else {\n                            var firstOptionValue = selectField.find('option:first').val();\n                            selectField.val(firstOptionValue);\n                        }\n                    }\n                }\n                else if (field_item['type'] == 'text') {\n                    $('#liz-filter-field-text' + lizMap.cleanName(field_item.title)).val('');\n                }\n\n                // Remove filter in stored object\n                filterConfig[field_item.order]['filter'] = null;\n\n            }\n\n\n            // Removes the getFeatureInfo geometry\n            function removeFeatureInfoGeometry() {\n                var layer = lizMap.map.getLayersByName('locatelayer');\n                if (layer.length == 1)\n                    layer[0].destroyFeatures();\n            }\n\n            // Adapt the size of the dock\n            function adaptLayerFilterSize() {\n                lizMap.events.on({\n                    // Adapt dock size to display metadata\n                    dockopened: function (e) {\n                        if (e.id == 'filter') {\n                            lizMap.updateContentSize();\n                        }\n                    },\n                    rightdockclosed: function () {\n                    },\n                    minidockclosed: function () {\n                    },\n                    layerfeatureremovefilter: function () {\n                        var layerId = filterConfigData.layerId;;\n\n                        // We need to reset the form\n                        // Deactivate all triggers to avoid unnecessary requests\n                        filterConfigData.deactivated = true;\n                        for (var o in filterConfig) {\n                            var field_item = filterConfig[o];\n                            if (!('title' in field_item) || field_item.layerId !== layerId) {\n                                continue;\n                            }\n                            resetFormField(field_item.order);\n                        }\n                        filterConfigData.deactivated = false;\n\n                        // Get feature count\n                        getFeatureCount();\n                    }\n                });\n\n            }\n\n            function formatDT(aDate, dateFormat) {\n                var formatted = $.datepicker.formatDate(dateFormat, aDate);\n                return formatted;\n            };\n\n            // Add an event on the inputs of a given field\n            // For example, do something when a checkox is clicked\n            // This triggers the calculation of the filter for the field\n            function addFieldEvents(field_item) {\n                var container = 'liz-filter-box-' + lizMap.cleanName(field_item.title);\n                var field_config = filterConfig[field_item.order]\n\n                if (field_item.type == 'uniquevalues') {\n                    if (field_item.format == 'checkboxes') {\n                        $('#' + container + ' button.liz-filter-field-value').click(function () {\n                            var self = $(this);\n                            // Do nothing if disabled\n                            if (self.hasClass('disabled'))\n                                return false;\n                            // Add checked class if unchecked\n                            if (!self.hasClass('checked'))\n                                self.addClass('checked');\n                            else\n                                self.removeClass('checked');\n\n                            // Filter the data\n                            setFormFieldFilter(field_item);\n                        });\n                    }\n                    if (field_item.format == 'select') {\n\n                        $('#liz-filter-field-' + lizMap.cleanName(field_item.title)).change(function () {\n                            // Filter the data\n                            setFormFieldFilter(field_item);\n                        });\n                    }\n                }\n\n                // date\n                if (field_config['type'] == 'date') {\n\n                    var hasSlider = (true);\n                    if (hasSlider) {\n                        // Get value in seconds\n                        var min_val = Date.parse(field_item['min']) / 1000;\n                        var max_val = Date.parse(field_item['max']) / 1000;\n\n                        // Add a function which will use a timeout\n                        // to prevent too heavy load on server\n                        // when using setFormFieldFilter\n                        var timer = null;\n                        function onDateChange(e, ui) {\n                            if (filterConfigData.deactivated)\n                                return false;\n                            clearTimeout(timer);\n                            timer = setTimeout(function () {\n                                var dt_cur_from = new Date(ui.values[0] * 1000); //.format(\"yyyy-mm-dd hh:ii:ss\");\n                                $('#liz-filter-field-min-date' + lizMap.cleanName(field_item.title)).val(\n                                    formatDT(dt_cur_from, 'yy-mm-dd')\n                                )\n                                var dt_cur_to = new Date(ui.values[1] * 1000); //.format(\"yyyy-mm-dd hh:ii:ss\");\n                                $('#liz-filter-field-max-date' + lizMap.cleanName(field_item.title)).val(\n                                    formatDT(dt_cur_to, 'yy-mm-dd')\n                                )\n\n                                setFormFieldFilter(field_item);\n                            }, 150);\n                        }\n\n                        $(\"#liz-filter-slider-range\" + lizMap.cleanName(field_item.title)).slider({\n                            range: true,\n                            min: min_val,\n                            max: max_val,\n                            step: 86400,\n                            values: [min_val, max_val],\n                            change: function (e, ui) {\n                                onDateChange(e, ui);\n                            },\n                            slide: function (e, ui) {\n                                var dt_cur_from = new Date(ui.values[0] * 1000); //.format(\"yyyy-mm-dd hh:ii:ss\");\n                                $('#liz-filter-field-min-date' + lizMap.cleanName(field_item.title)).val(\n                                    formatDT(dt_cur_from, 'yy-mm-dd')\n                                )\n                                var dt_cur_to = new Date(ui.values[1] * 1000); //.format(\"yyyy-mm-dd hh:ii:ss\");\n                                $('#liz-filter-field-max-date' + lizMap.cleanName(field_item.title)).val(\n                                    formatDT(dt_cur_to, 'yy-mm-dd')\n                                )\n                            }\n                        });\n                    }\n\n                    $('#liz-filter-field-min-date' + lizMap.cleanName(field_item.title) + ', #liz-filter-field-max-date' + lizMap.cleanName(field_item.title)).change(function () {\n                        // Filter the data. Only if the slider is not activated (if it is activated, it triggers the filter)\n                        if (!hasSlider) {\n                            setFormFieldFilter(field_item);\n                        } else {\n                            // Change values of the slider\n                            $(\"#liz-filter-slider-range\" + lizMap.cleanName(field_item.title)).slider(\n                                \"values\",\n                                [\n                                    Date.parse($('#liz-filter-field-min-date' + lizMap.cleanName(field_item.title)).val()) / 1000,\n                                    Date.parse($('#liz-filter-field-max-date' + lizMap.cleanName(field_item.title)).val()) / 1000\n                                ]\n                            );\n                        }\n                    });\n                }\n\n                // numeric\n                if (field_config['type'] == 'numeric') {\n\n                    var hasSlider = (true);\n                    if (hasSlider) {\n                        var min_val = field_item['min'];\n                        var max_val = field_item['max'];\n\n                        // Add a function which will use a timeout\n                        // to prevent too heavy load on server\n                        // when using setFormFieldFilter\n                        var timer = null;\n                        function onNumericChange(e, ui) {\n                            if (filterConfigData.deactivated)\n                                return false;\n                            clearTimeout(timer);\n                            timer = setTimeout(function () {\n                                var dt_cur_from = ui.values[0];\n                                $('#liz-filter-field-min-numeric' + lizMap.cleanName(field_item.title)).val(dt_cur_from);\n                                var dt_cur_to = ui.values[1];\n                                $('#liz-filter-field-max-numeric' + lizMap.cleanName(field_item.title)).val(dt_cur_to);\n\n                                setFormFieldFilter(field_item);\n                            }, 300);\n                        }\n\n                        $(\"#liz-filter-slider-range\" + lizMap.cleanName(field_item.title)).slider({\n                            range: true,\n                            min: min_val,\n                            max: max_val,\n                            step: 1,\n                            values: [min_val, max_val],\n                            change: function (e, ui) {\n                                onNumericChange(e, ui);\n                            },\n                            slide: function (e, ui) {\n                                var dt_cur_from = ui.values[0];\n                                $('#liz-filter-field-min-numeric' + lizMap.cleanName(field_item.title)).val(dt_cur_from);\n                                var dt_cur_to = ui.values[1];\n                                $('#liz-filter-field-max-numeric' + lizMap.cleanName(field_item.title)).val(dt_cur_to);\n                            }\n                        });\n                    }\n\n                    $('#liz-filter-field-min-numeric' + lizMap.cleanName(field_item.title) + ', #liz-filter-field-max-numeric' + lizMap.cleanName(field_item.title)).change(function () {\n                        // Filter the data. Only if the slider is not activated (if it is activated, it triggers the filter)\n                        if (!hasSlider) {\n                            setFormFieldFilter(field_item);\n                        } else {\n                            // Change values of the slider\n                            $(\"#liz-filter-slider-range\" + lizMap.cleanName(field_item.title)).slider(\n                                \"values\",\n                                [\n                                    $('#liz-filter-field-min-numeric' + lizMap.cleanName(field_item.title)).val(),\n                                    $('#liz-filter-field-max-numeric' + lizMap.cleanName(field_item.title)).val()\n                                ]\n                            );\n                        }\n                    });\n                }\n\n\n                // text\n                if (field_config['type'] == 'text') {\n                    $('#liz-filter-field-text' + lizMap.cleanName(field_item.title)).change(function () {\n                        // Filter the data\n                        setFormFieldFilter(field_item);\n                    });\n                }\n\n                // Add event on reset buttons\n                $('#liz-filter-box-' + lizMap.cleanName(field_item.title) + ' button.liz-filter-reset-field').click(function () {\n                    resetFormField($(this).val());\n                    setFormFilter();\n                });\n\n                // Add tooltip\n                $('#liz-filter-box-' + lizMap.cleanName(field_item.title) + ' [title]').tooltip();\n\n            }\n\n            function getFeatureCount(filter) {\n                filter = typeof filter !== 'undefined' ? filter : '';\n                var layerId = filterConfigData.layerId;\n\n                var sdata = {\n                    request: 'getFeatureCount',\n                    layerId: layerId,\n                    filter: filter\n                };\n                $.get(filterConfigData.url, sdata, function (result) {\n                    if (!result)\n                        return false;\n                    if ('status' in result && result['status'] == 'error') {\n                        console.log(result.title + ': ' + result.detail);\n                        return false;\n                    }\n                    for (var a in result) {\n                        var feat = result[a];\n                        var nb = feat['c'];\n                        try {\n                            nb = (new Intl.NumberFormat()).format(nb);\n                        } catch (error) {\n                            nb = feat['c'];\n                        }\n                        $('#liz-filter-item-layer-total-count').html(nb);\n                    }\n\n                }, 'json');\n            }\n\n            function setZoomExtent(filter) {\n                filter = typeof filter !== 'undefined' ? filter : '';\n\n                var layerId = filterConfigData.layerId;\n\n                // Get map projection and layer extent\n                var mapProjection = lizMap.map.getProjection();\n                if (mapProjection == 'EPSG:900913')\n                    mapProjection = 'EPSG:3857';\n\n                // Get layer\n                var layerName = filterConfigData.layerName;\n\n                if (!filter) {\n                    // Use layer extent\n                    var itemConfig = lizMap.config.layers[layerName];\n                    if ('bbox' in itemConfig) {\n                        var lex = itemConfig['bbox'][mapProjection]['bbox'];\n                        var extent = lex[0] + ',' + lex[1] + ',' + lex[2] + ',' + lex[3];\n                        $('#liz-filter-zoom').val(extent);\n                    }\n                    return false;\n                }\n\n                // If a filter is set, request the extent with filter\n                var sdata = {\n                    request: 'getExtent',\n                    layerId: layerId,\n                    filter: filter,\n                    crs: mapProjection\n                };\n                $.get(filterConfigData.url, sdata, function (result) {\n                    if (!result)\n                        return false;\n                    if ('status' in result && result['status'] == 'error') {\n                        console.log(result.title + ': ' + result.detail);\n                        // Hide Zoom button\n                        $('#liz-filter-zoom').hide();\n                        return;\n                    }\n\n                    for (var a in result) {\n                        //BOX(33373 7527405.72750002,449056.961709125 7724585.66040861)\n                        var sourcebbox = result[a]['bbox'];\n                        if (!sourcebbox)\n                            return false;\n                        sbbox = $.parseJSON(sourcebbox);\n                        bbox = sbbox.bbox;\n                        var extent = bbox[0] + ',' + bbox[1] + ',' + bbox[2] + ',' + bbox[3];\n                        $('#liz-filter-zoom').val(extent);\n                    }\n\n                }, 'json');\n            }\n\n            function zoomToFeatures() {\n                var bounds = $('#liz-filter-zoom').val();\n                var abounds = null;\n                if (bounds) {\n                    var abounds = bounds.split(',');\n                }\n                if (!bounds || abounds.length != 4) {\n                    return false;\n                }\n                var extent = new OpenLayers.Bounds(abounds[0], abounds[1], abounds[2], abounds[3]);\n                lizMap.map.zoomToExtent(extent);\n                return false;\n            }\n\n            // Launch LayerFilter feature\n            addLayerFilterToolInterface();\n            launchLayerFilterTool(filterConfigData.layerId);\n\n            // Listen to the layer selector changes\n            $('#liz-filter-layer-selector').change(function () {\n                deactivateFilter();\n                filterConfigData.layerId = $(this).val();\n                launchLayerFilterTool($(this).val());\n            });\n\n        } // uicreated\n    });\n\n\n}();\n\nvar todo = '</br>' +\n    '* Print get filtertoken if not yet set</br>' +\n    '* Updata attribute table if displayed: display the Orange button to refresh</br>' +\n    '* Update dataviz on filter</br>';\n"],"names":["lizMap","events","on","filterConfig","constructor","Object","keys","length","$","addClass","launchLayerFilterTool","layerId","getConfig","getLayerConfigById","layerName","filterConfigData","remove","formFilterLayersSorted","o","field_item","push","append","String","order","conf","getFormFieldInput","getLayerFilterForm","dockopened","e","id","updateContentSize","rightdockclosed","minidockclosed","layerfeatureremovefilter","deactivated","resetFormField","getFeatureCount","is","setZoomExtent","field_config","sdata","request","fieldname","field","filter","get","url","result","checkResult","html","a","getFormFieldHeader","format","cleanName","title","feat","dhtml","fkeys","z","sort","b","localeCompare","f_val","label","addFieldEvents","uniqueValuesFormInput","max_date","min_date","dmin","formatDT","Date","dmax","datepicker","dateFormat","changeMonth","changeYear","minDate","maxDate","dateFormInput","Number","numericFormInput","autocompleteData","trim","lizDict","autocomplete","source","autoFocus","delay","minLength","select","event","ui","this","val","item","value","change","textFormInput","console","log","detail","setFormFieldFilter","type","allchecked","nonechecked","selectId","selectVal","clist","Array","isArray","achecked","includes","replace","inputId","hasClass","sep","lk","i","provider","join","setUniqueValuesFilter","filters","min_id","max_id","min_val","max_val","startField","endField","parse","setDateFilter","setNumericFilter","setTextFilter","setFormFilter","afilter","triggerLayerFilter","deactivateFilter","layer","deactivateMaplayerFilter","triggerEvent","map","getLayersByName","destroyFeatures","field_item_order","removeClass","selectField","hasAttribute","sumo","unSelectAll","unSelectItem","firstOptionValue","find","aDate","formatDate","hasSlider","container","click","self","timer","slider","range","min","max","step","values","clearTimeout","setTimeout","dt_cur_from","dt_cur_to","onDateChange","slide","onNumericChange","tooltip","nb","Intl","NumberFormat","error","mapProjection","getProjection","itemConfig","config","layers","lex","extent","crs","hide","sourcebbox","sbbox","parseJSON","bbox","flayers","lconfig_get","lname","lconf","displayName","getVectorLayerResultFormat","getLayerFilterDockRoot","bounds","abounds","split","OpenLayers","Bounds","zoomToExtent","zoomToFeatures","request_params","exportVectorLayer","addLayerFilterToolInterface"],"sourceRoot":""}